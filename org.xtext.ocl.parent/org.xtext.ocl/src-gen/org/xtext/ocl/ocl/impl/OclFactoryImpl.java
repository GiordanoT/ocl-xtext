/**
 * generated by Xtext 2.26.0-SNAPSHOT
 */
package org.xtext.ocl.ocl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.ocl.ocl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class OclFactoryImpl extends EFactoryImpl implements OclFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static OclFactory init()
  {
    try
    {
      OclFactory theOclFactory = (OclFactory)EPackage.Registry.INSTANCE.getEFactory(OclPackage.eNS_URI);
      if (theOclFactory != null)
      {
        return theOclFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new OclFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OclFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case OclPackage.START: return createStart();
      case OclPackage.CONTEXT_EXPRESSION: return createContextExpression();
      case OclPackage.EXPRESSION: return createExpression();
      case OclPackage.LOGICAL_EXPRESSION: return createLogicalExpression();
      case OclPackage.RELATIONAL_EXPRESSION: return createRelationalExpression();
      case OclPackage.ADDITIVE_EXPRESSION: return createAdditiveExpression();
      case OclPackage.MULTIPLICATIVE_EXPRESSION: return createMultiplicativeExpression();
      case OclPackage.UNARY_EXPRESSION: return createUnaryExpression();
      case OclPackage.POSTFIX_EXPRESSION: return createPostfixExpression();
      case OclPackage.PRIMARY_EXPRESSION: return createPrimaryExpression();
      case OclPackage.IF_EXPRESSION: return createIfExpression();
      case OclPackage.FEATURE_CALL_PARAMETERS: return createFeatureCallParameters();
      case OclPackage.LITERAL: return createLiteral();
      case OclPackage.ENUMERATION_TYPE: return createEnumerationType();
      case OclPackage.SIMPLE_TYPE_SPECIFIER: return createSimpleTypeSpecifier();
      case OclPackage.LITERAL_COLLECTION: return createLiteralCollection();
      case OclPackage.EXPRESSION_LIST_OR_RANGE: return createExpressionListOrRange();
      case OclPackage.FEATURE_CALL: return createFeatureCall();
      case OclPackage.QUALIFIERS: return createQualifiers();
      case OclPackage.DECLARATOR: return createDeclarator();
      case OclPackage.PATH_TYPE_NAME: return createPathTypeName();
      case OclPackage.PATH_NAME: return createPathName();
      case OclPackage.TIME_EXPRESSION: return createTimeExpression();
      case OclPackage.ACTUAL_PARAMETER_LIST: return createActualParameterList();
      case OclPackage.TYPE_NAME: return createTypeName();
      case OclPackage.NAME: return createName();
      case OclPackage.ATTRIBUTE: return createAttribute();
      case OclPackage.FUNCTION: return createFunction();
      case OclPackage.NO_PARAM_FUNCTION: return createNoParamFunction();
      case OclPackage.ONE_TYPE_PARAM_FUNCTION: return createOneTypeParamFunction();
      case OclPackage.ONE_STRING_PARAM_FUNCTION: return createOneStringParamFunction();
      case OclPackage.TWO_STRING_PARAM_FUNCTION: return createTwoStringParamFunction();
      case OclPackage.ONE_INTEGER_PARAM_FUNCTION: return createOneIntegerParamFunction();
      case OclPackage.TWO_INTEGER_PARAM_FUNCTION: return createTwoIntegerParamFunction();
      case OclPackage.COLLECTION_KIND: return createCollectionKind();
      case OclPackage.NAVIGATION_OPERATOR: return createNavigationOperator();
      case OclPackage.UNARY_OPERATOR: return createUnaryOperator();
      case OclPackage.MULTIPLY_OPERATOR: return createMultiplyOperator();
      case OclPackage.ADD_OPERATOR: return createAddOperator();
      case OclPackage.RELATIONAL_OPERATOR: return createRelationalOperator();
      case OclPackage.LOGICAL_OPERATOR: return createLogicalOperator();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Start createStart()
  {
    StartImpl start = new StartImpl();
    return start;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContextExpression createContextExpression()
  {
    ContextExpressionImpl contextExpression = new ContextExpressionImpl();
    return contextExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalExpression createLogicalExpression()
  {
    LogicalExpressionImpl logicalExpression = new LogicalExpressionImpl();
    return logicalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationalExpression createRelationalExpression()
  {
    RelationalExpressionImpl relationalExpression = new RelationalExpressionImpl();
    return relationalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AdditiveExpression createAdditiveExpression()
  {
    AdditiveExpressionImpl additiveExpression = new AdditiveExpressionImpl();
    return additiveExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiplicativeExpression createMultiplicativeExpression()
  {
    MultiplicativeExpressionImpl multiplicativeExpression = new MultiplicativeExpressionImpl();
    return multiplicativeExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnaryExpression createUnaryExpression()
  {
    UnaryExpressionImpl unaryExpression = new UnaryExpressionImpl();
    return unaryExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PostfixExpression createPostfixExpression()
  {
    PostfixExpressionImpl postfixExpression = new PostfixExpressionImpl();
    return postfixExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimaryExpression createPrimaryExpression()
  {
    PrimaryExpressionImpl primaryExpression = new PrimaryExpressionImpl();
    return primaryExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfExpression createIfExpression()
  {
    IfExpressionImpl ifExpression = new IfExpressionImpl();
    return ifExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FeatureCallParameters createFeatureCallParameters()
  {
    FeatureCallParametersImpl featureCallParameters = new FeatureCallParametersImpl();
    return featureCallParameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Literal createLiteral()
  {
    LiteralImpl literal = new LiteralImpl();
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumerationType createEnumerationType()
  {
    EnumerationTypeImpl enumerationType = new EnumerationTypeImpl();
    return enumerationType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleTypeSpecifier createSimpleTypeSpecifier()
  {
    SimpleTypeSpecifierImpl simpleTypeSpecifier = new SimpleTypeSpecifierImpl();
    return simpleTypeSpecifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LiteralCollection createLiteralCollection()
  {
    LiteralCollectionImpl literalCollection = new LiteralCollectionImpl();
    return literalCollection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionListOrRange createExpressionListOrRange()
  {
    ExpressionListOrRangeImpl expressionListOrRange = new ExpressionListOrRangeImpl();
    return expressionListOrRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FeatureCall createFeatureCall()
  {
    FeatureCallImpl featureCall = new FeatureCallImpl();
    return featureCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Qualifiers createQualifiers()
  {
    QualifiersImpl qualifiers = new QualifiersImpl();
    return qualifiers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Declarator createDeclarator()
  {
    DeclaratorImpl declarator = new DeclaratorImpl();
    return declarator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PathTypeName createPathTypeName()
  {
    PathTypeNameImpl pathTypeName = new PathTypeNameImpl();
    return pathTypeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PathName createPathName()
  {
    PathNameImpl pathName = new PathNameImpl();
    return pathName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeExpression createTimeExpression()
  {
    TimeExpressionImpl timeExpression = new TimeExpressionImpl();
    return timeExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActualParameterList createActualParameterList()
  {
    ActualParameterListImpl actualParameterList = new ActualParameterListImpl();
    return actualParameterList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeName createTypeName()
  {
    TypeNameImpl typeName = new TypeNameImpl();
    return typeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Name createName()
  {
    NameImpl name = new NameImpl();
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NoParamFunction createNoParamFunction()
  {
    NoParamFunctionImpl noParamFunction = new NoParamFunctionImpl();
    return noParamFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OneTypeParamFunction createOneTypeParamFunction()
  {
    OneTypeParamFunctionImpl oneTypeParamFunction = new OneTypeParamFunctionImpl();
    return oneTypeParamFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OneStringParamFunction createOneStringParamFunction()
  {
    OneStringParamFunctionImpl oneStringParamFunction = new OneStringParamFunctionImpl();
    return oneStringParamFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TwoStringParamFunction createTwoStringParamFunction()
  {
    TwoStringParamFunctionImpl twoStringParamFunction = new TwoStringParamFunctionImpl();
    return twoStringParamFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OneIntegerParamFunction createOneIntegerParamFunction()
  {
    OneIntegerParamFunctionImpl oneIntegerParamFunction = new OneIntegerParamFunctionImpl();
    return oneIntegerParamFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TwoIntegerParamFunction createTwoIntegerParamFunction()
  {
    TwoIntegerParamFunctionImpl twoIntegerParamFunction = new TwoIntegerParamFunctionImpl();
    return twoIntegerParamFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CollectionKind createCollectionKind()
  {
    CollectionKindImpl collectionKind = new CollectionKindImpl();
    return collectionKind;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NavigationOperator createNavigationOperator()
  {
    NavigationOperatorImpl navigationOperator = new NavigationOperatorImpl();
    return navigationOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnaryOperator createUnaryOperator()
  {
    UnaryOperatorImpl unaryOperator = new UnaryOperatorImpl();
    return unaryOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiplyOperator createMultiplyOperator()
  {
    MultiplyOperatorImpl multiplyOperator = new MultiplyOperatorImpl();
    return multiplyOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddOperator createAddOperator()
  {
    AddOperatorImpl addOperator = new AddOperatorImpl();
    return addOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationalOperator createRelationalOperator()
  {
    RelationalOperatorImpl relationalOperator = new RelationalOperatorImpl();
    return relationalOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalOperator createLogicalOperator()
  {
    LogicalOperatorImpl logicalOperator = new LogicalOperatorImpl();
    return logicalOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OclPackage getOclPackage()
  {
    return (OclPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static OclPackage getPackage()
  {
    return OclPackage.eINSTANCE;
  }

} //OclFactoryImpl
