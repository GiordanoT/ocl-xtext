/*
 * generated by Xtext 2.26.0-SNAPSHOT
 */
package org.xtext.ocl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class OclGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class StartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.Start");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContextExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Start:
		//    (Expression)? | ContextExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//(Expression)? | ContextExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(Expression)?
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//ContextExpression
		public RuleCall getContextExpressionParserRuleCall_1() { return cContextExpressionParserRuleCall_1; }
	}
	public class ContextExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.ContextExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTYPENAME_TERMINALTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cInvKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cPreKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cPostKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ContextExpression:
		//    "context" TYPENAME_TERMINAL ("inv:"|"pre:"|"post:") Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//"context" TYPENAME_TERMINAL ("inv:"|"pre:"|"post:") Expression
		public Group getGroup() { return cGroup; }
		
		//"context"
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//TYPENAME_TERMINAL
		public RuleCall getTYPENAME_TERMINALTerminalRuleCall_1() { return cTYPENAME_TERMINALTerminalRuleCall_1; }
		
		//("inv:"|"pre:"|"post:")
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//"inv:"
		public Keyword getInvKeyword_2_0() { return cInvKeyword_2_0; }
		
		//"pre:"
		public Keyword getPreKeyword_2_1() { return cPreKeyword_2_1; }
		
		//"post:"
		public Keyword getPostKeyword_2_2() { return cPostKeyword_2_2; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_3() { return cExpressionParserRuleCall_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.Expression");
		private final RuleCall cLogicalExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* 6 */
		//Expression:
		//    LogicalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalExpression
		public RuleCall getLogicalExpressionParserRuleCall() { return cLogicalExpressionParserRuleCall; }
	}
	public class LogicalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.LogicalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpRelationalExpressionParserRuleCall_0_0 = (RuleCall)cExpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpLogicalOperatorParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpRelationalExpressionParserRuleCall_1_1_0 = (RuleCall)cExpAssignment_1_1.eContents().get(0);
		
		///* 7 */
		//LogicalExpression:
		//    (exp+=RelationalExpression)(op+=LogicalOperator exp+=RelationalExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(exp+=RelationalExpression)(op+=LogicalOperator exp+=RelationalExpression)*
		public Group getGroup() { return cGroup; }
		
		//(exp+=RelationalExpression)
		public Assignment getExpAssignment_0() { return cExpAssignment_0; }
		
		//RelationalExpression
		public RuleCall getExpRelationalExpressionParserRuleCall_0_0() { return cExpRelationalExpressionParserRuleCall_0_0; }
		
		//(op+=LogicalOperator exp+=RelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//op+=LogicalOperator
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//LogicalOperator
		public RuleCall getOpLogicalOperatorParserRuleCall_1_0_0() { return cOpLogicalOperatorParserRuleCall_1_0_0; }
		
		//exp+=RelationalExpression
		public Assignment getExpAssignment_1_1() { return cExpAssignment_1_1; }
		
		//RelationalExpression
		public RuleCall getExpRelationalExpressionParserRuleCall_1_1_0() { return cExpRelationalExpressionParserRuleCall_1_1_0; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpAdditiveExpressionParserRuleCall_0_0 = (RuleCall)cExpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpRelationalOperatorParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpAdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cExpAssignment_1_1.eContents().get(0);
		
		///* 8 */
		//RelationalExpression:
		//    (exp+=AdditiveExpression)(op+=RelationalOperator exp+=AdditiveExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(exp+=AdditiveExpression)(op+=RelationalOperator exp+=AdditiveExpression)?
		public Group getGroup() { return cGroup; }
		
		//(exp+=AdditiveExpression)
		public Assignment getExpAssignment_0() { return cExpAssignment_0; }
		
		//AdditiveExpression
		public RuleCall getExpAdditiveExpressionParserRuleCall_0_0() { return cExpAdditiveExpressionParserRuleCall_0_0; }
		
		//(op+=RelationalOperator exp+=AdditiveExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//op+=RelationalOperator
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//RelationalOperator
		public RuleCall getOpRelationalOperatorParserRuleCall_1_0_0() { return cOpRelationalOperatorParserRuleCall_1_0_0; }
		
		//exp+=AdditiveExpression
		public Assignment getExpAssignment_1_1() { return cExpAssignment_1_1; }
		
		//AdditiveExpression
		public RuleCall getExpAdditiveExpressionParserRuleCall_1_1_0() { return cExpAdditiveExpressionParserRuleCall_1_1_0; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpMultiplicativeExpressionParserRuleCall_0_0 = (RuleCall)cExpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpAddOperatorParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cExpAssignment_1_1.eContents().get(0);
		
		///* 9 */
		//AdditiveExpression:
		//    (exp+=MultiplicativeExpression)(op+=AddOperator exp+=MultiplicativeExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(exp+=MultiplicativeExpression)(op+=AddOperator exp+=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }
		
		//(exp+=MultiplicativeExpression)
		public Assignment getExpAssignment_0() { return cExpAssignment_0; }
		
		//MultiplicativeExpression
		public RuleCall getExpMultiplicativeExpressionParserRuleCall_0_0() { return cExpMultiplicativeExpressionParserRuleCall_0_0; }
		
		//(op+=AddOperator exp+=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//op+=AddOperator
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//AddOperator
		public RuleCall getOpAddOperatorParserRuleCall_1_0_0() { return cOpAddOperatorParserRuleCall_1_0_0; }
		
		//exp+=MultiplicativeExpression
		public Assignment getExpAssignment_1_1() { return cExpAssignment_1_1; }
		
		//MultiplicativeExpression
		public RuleCall getExpMultiplicativeExpressionParserRuleCall_1_1_0() { return cExpMultiplicativeExpressionParserRuleCall_1_1_0; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpUnaryExpressionParserRuleCall_0_0 = (RuleCall)cExpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpMultiplyOperatorParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpUnaryExpressionParserRuleCall_1_1_0 = (RuleCall)cExpAssignment_1_1.eContents().get(0);
		
		///* 10 */
		//MultiplicativeExpression:
		//    (exp+=UnaryExpression)(op+=MultiplyOperator exp+=UnaryExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(exp+=UnaryExpression)(op+=MultiplyOperator exp+=UnaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//(exp+=UnaryExpression)
		public Assignment getExpAssignment_0() { return cExpAssignment_0; }
		
		//UnaryExpression
		public RuleCall getExpUnaryExpressionParserRuleCall_0_0() { return cExpUnaryExpressionParserRuleCall_0_0; }
		
		//(op+=MultiplyOperator exp+=UnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//op+=MultiplyOperator
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//MultiplyOperator
		public RuleCall getOpMultiplyOperatorParserRuleCall_1_0_0() { return cOpMultiplyOperatorParserRuleCall_1_0_0; }
		
		//exp+=UnaryExpression
		public Assignment getExpAssignment_1_1() { return cExpAssignment_1_1; }
		
		//UnaryExpression
		public RuleCall getExpUnaryExpressionParserRuleCall_1_1_0() { return cExpUnaryExpressionParserRuleCall_1_1_0; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.UnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpUnaryOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpPostfixExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		
		///* 11 */
		//UnaryExpression:
		//     (op+=UnaryOperator)* exp=PostfixExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//(op+=UnaryOperator)* exp=PostfixExpression
		public Group getGroup() { return cGroup; }
		
		//(op+=UnaryOperator)*
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//UnaryOperator
		public RuleCall getOpUnaryOperatorParserRuleCall_0_0() { return cOpUnaryOperatorParserRuleCall_0_0; }
		
		//exp=PostfixExpression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//PostfixExpression
		public RuleCall getExpPostfixExpressionParserRuleCall_1_0() { return cExpPostfixExpressionParserRuleCall_1_0; }
	}
	public class PostfixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.PostfixExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpNavigationOperatorParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cFeaturesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFeaturesFeatureCallParserRuleCall_1_1_0 = (RuleCall)cFeaturesAssignment_1_1.eContents().get(0);
		
		///* 12 */
		//PostfixExpression:
		//    PrimaryExpression (op+=NavigationOperator features+=FeatureCall )*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression (op+=NavigationOperator features+=FeatureCall )*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//(op+=NavigationOperator features+=FeatureCall )*
		public Group getGroup_1() { return cGroup_1; }
		
		//op+=NavigationOperator
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//NavigationOperator
		public RuleCall getOpNavigationOperatorParserRuleCall_1_0_0() { return cOpNavigationOperatorParserRuleCall_1_0_0; }
		
		//features+=FeatureCall
		public Assignment getFeaturesAssignment_1_1() { return cFeaturesAssignment_1_1; }
		
		//FeatureCall
		public RuleCall getFeaturesFeatureCallParserRuleCall_1_1_0() { return cFeaturesFeatureCallParserRuleCall_1_1_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralCollectionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFeatureCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final RuleCall cIfExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		///* 13 */
		//PrimaryExpression:
		//    LiteralCollection | Literal | FeatureCall | "(" Expression ")" | IfExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralCollection | Literal | FeatureCall | "(" Expression ")" | IfExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralCollection
		public RuleCall getLiteralCollectionParserRuleCall_0() { return cLiteralCollectionParserRuleCall_0; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_1() { return cLiteralParserRuleCall_1; }
		
		//FeatureCall
		public RuleCall getFeatureCallParserRuleCall_2() { return cFeatureCallParserRuleCall_2; }
		
		//"(" Expression ")"
		public Group getGroup_3() { return cGroup_3; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_3_1() { return cExpressionParserRuleCall_3_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
		
		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_4() { return cIfExpressionParserRuleCall_4; }
	}
	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExpAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_4_1_0 = (RuleCall)cExpAssignment_4_1.eContents().get(0);
		private final Keyword cEndifKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///* 14 */
		//IfExpression:
		//    "if" exp+=Expression "then" exp+=Expression ("else" exp+=Expression)? "endif";
		@Override public ParserRule getRule() { return rule; }
		
		//"if" exp+=Expression "then" exp+=Expression ("else" exp+=Expression)? "endif"
		public Group getGroup() { return cGroup; }
		
		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//exp+=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
		
		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//exp+=Expression
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_3_0() { return cExpExpressionParserRuleCall_3_0; }
		
		//("else" exp+=Expression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//"else"
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//exp+=Expression
		public Assignment getExpAssignment_4_1() { return cExpAssignment_4_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_4_1_0() { return cExpExpressionParserRuleCall_4_1_0; }
		
		//"endif"
		public Keyword getEndifKeyword_5() { return cEndifKeyword_5; }
	}
	public class FeatureCallParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.FeatureCallParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDecsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDecsDeclaratorParserRuleCall_1_0 = (RuleCall)cDecsAssignment_1.eContents().get(0);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsActualParameterListParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///* 15 */
		//FeatureCallParameters:
		//    '(' (decs=Declarator)? params=ActualParameterList ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (decs=Declarator)? params=ActualParameterList ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(decs=Declarator)?
		public Assignment getDecsAssignment_1() { return cDecsAssignment_1; }
		
		//Declarator
		public RuleCall getDecsDeclaratorParserRuleCall_1_0() { return cDecsDeclaratorParserRuleCall_1_0; }
		
		//params=ActualParameterList
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }
		
		//ActualParameterList
		public RuleCall getParamsActualParameterListParserRuleCall_2_0() { return cParamsActualParameterListParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameNUMBERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cNumberSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameNAME_TERMINALTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		
		///* 16 */
		//Literal:
		//    name=STRING | name=NUMBER | '#'name=NAME_TERMINAL;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING | name=NUMBER | '#'name=NAME_TERMINAL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }
		
		//name=NUMBER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NUMBER
		public RuleCall getNameNUMBERTerminalRuleCall_1_0() { return cNameNUMBERTerminalRuleCall_1_0; }
		
		//'#'name=NAME_TERMINAL
		public Group getGroup_2() { return cGroup_2; }
		
		//'#'
		public Keyword getNumberSignKeyword_2_0() { return cNumberSignKeyword_2_0; }
		
		//name=NAME_TERMINAL
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//NAME_TERMINAL
		public RuleCall getNameNAME_TERMINALTerminalRuleCall_2_1_0() { return cNameNAME_TERMINALTerminalRuleCall_2_1_0; }
	}
	public class EnumerationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.EnumerationType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cNumberSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLeftAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLeftNameParserRuleCall_2_1_0 = (RuleCall)cLeftAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cNumberSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cRightsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cRightsNameParserRuleCall_3_2_0 = (RuleCall)cRightsAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///* 17 */
		//EnumerationType:
		//     "enum" '{' ('#'left=Name) (',''#'rights+=Name)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//"enum" '{' ('#'left=Name) (',''#'rights+=Name)* '}'
		public Group getGroup() { return cGroup; }
		
		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('#'left=Name)
		public Group getGroup_2() { return cGroup_2; }
		
		//'#'
		public Keyword getNumberSignKeyword_2_0() { return cNumberSignKeyword_2_0; }
		
		//left=Name
		public Assignment getLeftAssignment_2_1() { return cLeftAssignment_2_1; }
		
		//Name
		public RuleCall getLeftNameParserRuleCall_2_1_0() { return cLeftNameParserRuleCall_2_1_0; }
		
		//(',''#'rights+=Name)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_3_1() { return cNumberSignKeyword_3_1; }
		
		//rights+=Name
		public Assignment getRightsAssignment_3_2() { return cRightsAssignment_3_2; }
		
		//Name
		public RuleCall getRightsNameParserRuleCall_3_2_0() { return cRightsNameParserRuleCall_3_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SimpleTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.SimpleTypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPathTypeNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumerationTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* 18 */
		//SimpleTypeSpecifier:
		//    PathTypeName | EnumerationType;
		@Override public ParserRule getRule() { return rule; }
		
		//PathTypeName | EnumerationType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PathTypeName
		public RuleCall getPathTypeNameParserRuleCall_0() { return cPathTypeNameParserRuleCall_0; }
		
		//EnumerationType
		public RuleCall getEnumerationTypeParserRuleCall_1() { return cEnumerationTypeParserRuleCall_1; }
	}
	public class LiteralCollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.LiteralCollection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralCollectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameCollectionKindParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpExpressionListOrRangeParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///* 19 */
		//LiteralCollection:
		//    {LiteralCollection}
		//    name=CollectionKind "{" (exp=ExpressionListOrRange)? "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{LiteralCollection}
		//name=CollectionKind "{" (exp=ExpressionListOrRange)? "}"
		public Group getGroup() { return cGroup; }
		
		//{LiteralCollection}
		public Action getLiteralCollectionAction_0() { return cLiteralCollectionAction_0; }
		
		//name=CollectionKind
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//CollectionKind
		public RuleCall getNameCollectionKindParserRuleCall_1_0() { return cNameCollectionKindParserRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(exp=ExpressionListOrRange)?
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }
		
		//ExpressionListOrRange
		public RuleCall getExpExpressionListOrRangeParserRuleCall_3_0() { return cExpExpressionListOrRangeParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ExpressionListOrRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.ExpressionListOrRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpExpressionParserRuleCall_0_0 = (RuleCall)cExpAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cExpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0_1_0 = (RuleCall)cExpAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExpAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_1_1_0 = (RuleCall)cExpAssignment_1_1_1.eContents().get(0);
		
		///* 20 */
		//ExpressionListOrRange:
		//    exp+=Expression ( ( "," exp+=Expression )+ | ( ".." exp+=Expression ))?;
		@Override public ParserRule getRule() { return rule; }
		
		//exp+=Expression ( ( "," exp+=Expression )+ | ( ".." exp+=Expression ))?
		public Group getGroup() { return cGroup; }
		
		//exp+=Expression
		public Assignment getExpAssignment_0() { return cExpAssignment_0; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_0_0() { return cExpExpressionParserRuleCall_0_0; }
		
		//( ( "," exp+=Expression )+ | ( ".." exp+=Expression ))?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//( "," exp+=Expression )+
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//","
		public Keyword getCommaKeyword_1_0_0() { return cCommaKeyword_1_0_0; }
		
		//exp+=Expression
		public Assignment getExpAssignment_1_0_1() { return cExpAssignment_1_0_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0_1_0() { return cExpExpressionParserRuleCall_1_0_1_0; }
		
		//( ".." exp+=Expression )
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//".."
		public Keyword getFullStopFullStopKeyword_1_1_0() { return cFullStopFullStopKeyword_1_1_0; }
		
		//exp+=Expression
		public Assignment getExpAssignment_1_1_1() { return cExpAssignment_1_1_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_1_1_0() { return cExpExpressionParserRuleCall_1_1_1_0; }
	}
	public class FeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.FeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPathNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsTimeExpressionParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsQualifiersParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Assignment cParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamsFeatureCallParametersParserRuleCall_3_0 = (RuleCall)cParamsAssignment_3.eContents().get(0);
		
		///* 21 */
		//FeatureCall:
		//    PathName (params+=TimeExpression)? (params+=Qualifiers)? (params+=FeatureCallParameters)?;
		@Override public ParserRule getRule() { return rule; }
		
		//PathName (params+=TimeExpression)? (params+=Qualifiers)? (params+=FeatureCallParameters)?
		public Group getGroup() { return cGroup; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_0() { return cPathNameParserRuleCall_0; }
		
		//(params+=TimeExpression)?
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }
		
		//TimeExpression
		public RuleCall getParamsTimeExpressionParserRuleCall_1_0() { return cParamsTimeExpressionParserRuleCall_1_0; }
		
		//(params+=Qualifiers)?
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }
		
		//Qualifiers
		public RuleCall getParamsQualifiersParserRuleCall_2_0() { return cParamsQualifiersParserRuleCall_2_0; }
		
		//(params+=FeatureCallParameters)?
		public Assignment getParamsAssignment_3() { return cParamsAssignment_3; }
		
		//FeatureCallParameters
		public RuleCall getParamsFeatureCallParametersParserRuleCall_3_0() { return cParamsFeatureCallParametersParserRuleCall_3_0; }
	}
	public class QualifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.Qualifiers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cActualParameterListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		///* 22 */
		//Qualifiers:
		//    '[' ActualParameterList ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' ActualParameterList ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//ActualParameterList
		public RuleCall getActualParameterListParserRuleCall_1() { return cActualParameterListParserRuleCall_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class DeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.Declarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCOLONTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeSimpleTypeSpecifierParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///* 23 */
		//Declarator:
		//    name+=Name(',' name+=Name)* (COLON type=SimpleTypeSpecifier)? '|';
		@Override public ParserRule getRule() { return rule; }
		
		//name+=Name(',' name+=Name)* (COLON type=SimpleTypeSpecifier)? '|'
		public Group getGroup() { return cGroup; }
		
		//name+=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }
		
		//(',' name+=Name)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//name+=Name
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_1_0() { return cNameNameParserRuleCall_1_1_0; }
		
		//(COLON type=SimpleTypeSpecifier)?
		public Group getGroup_2() { return cGroup_2; }
		
		//COLON
		public RuleCall getCOLONTerminalRuleCall_2_0() { return cCOLONTerminalRuleCall_2_0; }
		
		//type=SimpleTypeSpecifier
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//SimpleTypeSpecifier
		public RuleCall getTypeSimpleTypeSpecifierParserRuleCall_2_1_0() { return cTypeSimpleTypeSpecifierParserRuleCall_2_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_3() { return cVerticalLineKeyword_3; }
	}
	public class PathTypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.PathTypeName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftTypeNameParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDOUBLE_COLONTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cRightsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightsTypeNameParserRuleCall_1_1_0 = (RuleCall)cRightsAssignment_1_1.eContents().get(0);
		
		///* 24 */
		//PathTypeName:
		//    (left=TypeName)(DOUBLE_COLON(rights+=TypeName))*;
		@Override public ParserRule getRule() { return rule; }
		
		//(left=TypeName)(DOUBLE_COLON(rights+=TypeName))*
		public Group getGroup() { return cGroup; }
		
		//(left=TypeName)
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//TypeName
		public RuleCall getLeftTypeNameParserRuleCall_0_0() { return cLeftTypeNameParserRuleCall_0_0; }
		
		//(DOUBLE_COLON(rights+=TypeName))*
		public Group getGroup_1() { return cGroup_1; }
		
		//DOUBLE_COLON
		public RuleCall getDOUBLE_COLONTerminalRuleCall_1_0() { return cDOUBLE_COLONTerminalRuleCall_1_0; }
		
		//(rights+=TypeName)
		public Assignment getRightsAssignment_1_1() { return cRightsAssignment_1_1; }
		
		//TypeName
		public RuleCall getRightsTypeNameParserRuleCall_1_1_0() { return cRightsTypeNameParserRuleCall_1_1_0; }
	}
	public class PathNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.PathName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cLeftAlternatives_0_0 = (Alternatives)cLeftAssignment_0.eContents().get(0);
		private final RuleCall cLeftTypeNameParserRuleCall_0_0_0 = (RuleCall)cLeftAlternatives_0_0.eContents().get(0);
		private final RuleCall cLeftNameParserRuleCall_0_0_1 = (RuleCall)cLeftAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDOUBLE_COLONTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cRightsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cRightsAlternatives_1_1_0 = (Alternatives)cRightsAssignment_1_1.eContents().get(0);
		private final RuleCall cRightsTypeNameParserRuleCall_1_1_0_0 = (RuleCall)cRightsAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cRightsNameParserRuleCall_1_1_0_1 = (RuleCall)cRightsAlternatives_1_1_0.eContents().get(1);
		
		///* 25 */
		//PathName:
		//    (left=(TypeName | Name))(DOUBLE_COLON(rights+=(TypeName | Name)))*;
		@Override public ParserRule getRule() { return rule; }
		
		//(left=(TypeName | Name))(DOUBLE_COLON(rights+=(TypeName | Name)))*
		public Group getGroup() { return cGroup; }
		
		//(left=(TypeName | Name))
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//(TypeName | Name)
		public Alternatives getLeftAlternatives_0_0() { return cLeftAlternatives_0_0; }
		
		//TypeName
		public RuleCall getLeftTypeNameParserRuleCall_0_0_0() { return cLeftTypeNameParserRuleCall_0_0_0; }
		
		//Name
		public RuleCall getLeftNameParserRuleCall_0_0_1() { return cLeftNameParserRuleCall_0_0_1; }
		
		//(DOUBLE_COLON(rights+=(TypeName | Name)))*
		public Group getGroup_1() { return cGroup_1; }
		
		//DOUBLE_COLON
		public RuleCall getDOUBLE_COLONTerminalRuleCall_1_0() { return cDOUBLE_COLONTerminalRuleCall_1_0; }
		
		//(rights+=(TypeName | Name))
		public Assignment getRightsAssignment_1_1() { return cRightsAssignment_1_1; }
		
		//(TypeName | Name)
		public Alternatives getRightsAlternatives_1_1_0() { return cRightsAlternatives_1_1_0; }
		
		//TypeName
		public RuleCall getRightsTypeNameParserRuleCall_1_1_0_0() { return cRightsTypeNameParserRuleCall_1_1_0_0; }
		
		//Name
		public RuleCall getRightsNameParserRuleCall_1_1_0_1() { return cRightsNameParserRuleCall_1_1_0_1; }
	}
	public class TimeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.TimeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAME_TERMINALTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		///* 26 */
		//TimeExpression:
		//    '@' name=NAME_TERMINAL;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' name=NAME_TERMINAL
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//name=NAME_TERMINAL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME_TERMINAL
		public RuleCall getNameNAME_TERMINALTerminalRuleCall_1_0() { return cNameNAME_TERMINALTerminalRuleCall_1_0; }
	}
	public class ActualParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.ActualParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpExpressionParserRuleCall_0_0 = (RuleCall)cExpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_1_0 = (RuleCall)cExpAssignment_1_1.eContents().get(0);
		
		///* 27 */
		//ActualParameterList:
		//    exp+=Expression (','exp+=Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//exp+=Expression (','exp+=Expression)*
		public Group getGroup() { return cGroup; }
		
		//exp+=Expression
		public Assignment getExpAssignment_0() { return cExpAssignment_0; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_0_0() { return cExpExpressionParserRuleCall_0_0; }
		
		//(','exp+=Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//exp+=Expression
		public Assignment getExpAssignment_1_1() { return cExpAssignment_1_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_1_0() { return cExpExpressionParserRuleCall_1_1_0; }
	}
	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.TypeName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameTYPENAME_TERMINALTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		///* LEXICON */
		//TypeName:
		//    name=TYPENAME_TERMINAL;
		@Override public ParserRule getRule() { return rule; }
		
		//name=TYPENAME_TERMINAL
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//TYPENAME_TERMINAL
		public RuleCall getNameTYPENAME_TERMINALTerminalRuleCall_0() { return cNameTYPENAME_TERMINALTerminalRuleCall_0; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.Name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Name:
		//    Attribute | Function;
		@Override public ParserRule getRule() { return rule; }
		
		//Attribute | Function
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_1() { return cFunctionParserRuleCall_1; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.Attribute");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameNAME_TERMINALTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Attribute:
		//    name=NAME_TERMINAL;
		@Override public ParserRule getRule() { return rule; }
		
		//name=NAME_TERMINAL
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//NAME_TERMINAL
		public RuleCall getNameNAME_TERMINALTerminalRuleCall_0() { return cNameNAME_TERMINALTerminalRuleCall_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNoParamFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOneTypeParamFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOneStringParamFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTwoStringParamFunctionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTwoIntegerParamFunctionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOneIntegerParamFunctionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		///* FUNCTION */
		//Function:
		//    NoParamFunction | OneTypeParamFunction | OneStringParamFunction | TwoStringParamFunction | TwoIntegerParamFunction |
		//    OneIntegerParamFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//NoParamFunction | OneTypeParamFunction | OneStringParamFunction | TwoStringParamFunction | TwoIntegerParamFunction |
		//OneIntegerParamFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NoParamFunction
		public RuleCall getNoParamFunctionParserRuleCall_0() { return cNoParamFunctionParserRuleCall_0; }
		
		//OneTypeParamFunction
		public RuleCall getOneTypeParamFunctionParserRuleCall_1() { return cOneTypeParamFunctionParserRuleCall_1; }
		
		//OneStringParamFunction
		public RuleCall getOneStringParamFunctionParserRuleCall_2() { return cOneStringParamFunctionParserRuleCall_2; }
		
		//TwoStringParamFunction
		public RuleCall getTwoStringParamFunctionParserRuleCall_3() { return cTwoStringParamFunctionParserRuleCall_3; }
		
		//TwoIntegerParamFunction
		public RuleCall getTwoIntegerParamFunctionParserRuleCall_4() { return cTwoIntegerParamFunctionParserRuleCall_4; }
		
		//OneIntegerParamFunction
		public RuleCall getOneIntegerParamFunctionParserRuleCall_5() { return cOneIntegerParamFunctionParserRuleCall_5; }
	}
	public class NoParamFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.NoParamFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final Keyword cNameAllInstacesKeyword_0_0_0 = (Keyword)cNameAlternatives_0_0.eContents().get(0);
		private final Keyword cNameOclTypeKeyword_0_0_1 = (Keyword)cNameAlternatives_0_0.eContents().get(1);
		private final Keyword cNameToStringKeyword_0_0_2 = (Keyword)cNameAlternatives_0_0.eContents().get(2);
		private final Keyword cNameRefImmediateCompositeKeyword_0_0_3 = (Keyword)cNameAlternatives_0_0.eContents().get(3);
		private final Keyword cNameSizeKeyword_0_0_4 = (Keyword)cNameAlternatives_0_0.eContents().get(4);
		private final Keyword cNameToIntegerKeyword_0_0_5 = (Keyword)cNameAlternatives_0_0.eContents().get(5);
		private final Keyword cNameToUpperKeyword_0_0_6 = (Keyword)cNameAlternatives_0_0.eContents().get(6);
		private final Keyword cNameToRealKeyword_0_0_7 = (Keyword)cNameAlternatives_0_0.eContents().get(7);
		private final Keyword cNameToLowerKeyword_0_0_8 = (Keyword)cNameAlternatives_0_0.eContents().get(8);
		private final Keyword cNameToSequenceKeyword_0_0_9 = (Keyword)cNameAlternatives_0_0.eContents().get(9);
		private final Keyword cNameTrimKeyword_0_0_10 = (Keyword)cNameAlternatives_0_0.eContents().get(10);
		private final Keyword cNameIsEmptyKeyword_0_0_11 = (Keyword)cNameAlternatives_0_0.eContents().get(11);
		private final Keyword cNameOclIsUndefinedKeyword_0_0_12 = (Keyword)cNameAlternatives_0_0.eContents().get(12);
		private final Keyword cNameFloorKeyword_0_0_13 = (Keyword)cNameAlternatives_0_0.eContents().get(13);
		private final Keyword cNameRoundKeyword_0_0_14 = (Keyword)cNameAlternatives_0_0.eContents().get(14);
		private final Keyword cNameNotEmptyKeyword_0_0_15 = (Keyword)cNameAlternatives_0_0.eContents().get(15);
		private final Keyword cNameAsBagKeyword_0_0_16 = (Keyword)cNameAlternatives_0_0.eContents().get(16);
		private final Keyword cNameAsSequenceKeyword_0_0_17 = (Keyword)cNameAlternatives_0_0.eContents().get(17);
		private final Keyword cNameSumKeyword_0_0_18 = (Keyword)cNameAlternatives_0_0.eContents().get(18);
		private final Keyword cNameAsSetKeyword_0_0_19 = (Keyword)cNameAlternatives_0_0.eContents().get(19);
		private final Keyword cNameFlattenKeyword_0_0_20 = (Keyword)cNameAlternatives_0_0.eContents().get(20);
		private final Keyword cNameFirstKeyword_0_0_21 = (Keyword)cNameAlternatives_0_0.eContents().get(21);
		private final Keyword cNameLastKeyword_0_0_22 = (Keyword)cNameAlternatives_0_0.eContents().get(22);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NoParamFunction:
		//    name=(
		//        "allInstaces" | "oclType" | "toString" | "refImmediateComposite" | "size" | "toInteger" | "toUpper" |
		//        "toReal" | "toLower" | "toSequence" | "trim" | "isEmpty" | "oclIsUndefined" | "floor" | "round"  | "notEmpty" |
		//        "asBag" | "asSequence" | "sum" | "asSet" | "flatten" | "first" | "last"
		//    ) "()";
		@Override public ParserRule getRule() { return rule; }
		
		//name=(
		//    "allInstaces" | "oclType" | "toString" | "refImmediateComposite" | "size" | "toInteger" | "toUpper" |
		//    "toReal" | "toLower" | "toSequence" | "trim" | "isEmpty" | "oclIsUndefined" | "floor" | "round"  | "notEmpty" |
		//    "asBag" | "asSequence" | "sum" | "asSet" | "flatten" | "first" | "last"
		//) "()"
		public Group getGroup() { return cGroup; }
		
		//name=(
		//    "allInstaces" | "oclType" | "toString" | "refImmediateComposite" | "size" | "toInteger" | "toUpper" |
		//    "toReal" | "toLower" | "toSequence" | "trim" | "isEmpty" | "oclIsUndefined" | "floor" | "round"  | "notEmpty" |
		//    "asBag" | "asSequence" | "sum" | "asSet" | "flatten" | "first" | "last"
		//)
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//(
		//        "allInstaces" | "oclType" | "toString" | "refImmediateComposite" | "size" | "toInteger" | "toUpper" |
		//        "toReal" | "toLower" | "toSequence" | "trim" | "isEmpty" | "oclIsUndefined" | "floor" | "round"  | "notEmpty" |
		//        "asBag" | "asSequence" | "sum" | "asSet" | "flatten" | "first" | "last"
		//    )
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }
		
		//"allInstaces"
		public Keyword getNameAllInstacesKeyword_0_0_0() { return cNameAllInstacesKeyword_0_0_0; }
		
		//"oclType"
		public Keyword getNameOclTypeKeyword_0_0_1() { return cNameOclTypeKeyword_0_0_1; }
		
		//"toString"
		public Keyword getNameToStringKeyword_0_0_2() { return cNameToStringKeyword_0_0_2; }
		
		//"refImmediateComposite"
		public Keyword getNameRefImmediateCompositeKeyword_0_0_3() { return cNameRefImmediateCompositeKeyword_0_0_3; }
		
		//"size"
		public Keyword getNameSizeKeyword_0_0_4() { return cNameSizeKeyword_0_0_4; }
		
		//"toInteger"
		public Keyword getNameToIntegerKeyword_0_0_5() { return cNameToIntegerKeyword_0_0_5; }
		
		//"toUpper"
		public Keyword getNameToUpperKeyword_0_0_6() { return cNameToUpperKeyword_0_0_6; }
		
		//"toReal"
		public Keyword getNameToRealKeyword_0_0_7() { return cNameToRealKeyword_0_0_7; }
		
		//"toLower"
		public Keyword getNameToLowerKeyword_0_0_8() { return cNameToLowerKeyword_0_0_8; }
		
		//"toSequence"
		public Keyword getNameToSequenceKeyword_0_0_9() { return cNameToSequenceKeyword_0_0_9; }
		
		//"trim"
		public Keyword getNameTrimKeyword_0_0_10() { return cNameTrimKeyword_0_0_10; }
		
		//"isEmpty"
		public Keyword getNameIsEmptyKeyword_0_0_11() { return cNameIsEmptyKeyword_0_0_11; }
		
		//"oclIsUndefined"
		public Keyword getNameOclIsUndefinedKeyword_0_0_12() { return cNameOclIsUndefinedKeyword_0_0_12; }
		
		//"floor"
		public Keyword getNameFloorKeyword_0_0_13() { return cNameFloorKeyword_0_0_13; }
		
		//"round"
		public Keyword getNameRoundKeyword_0_0_14() { return cNameRoundKeyword_0_0_14; }
		
		//"notEmpty"
		public Keyword getNameNotEmptyKeyword_0_0_15() { return cNameNotEmptyKeyword_0_0_15; }
		
		//"asBag"
		public Keyword getNameAsBagKeyword_0_0_16() { return cNameAsBagKeyword_0_0_16; }
		
		//"asSequence"
		public Keyword getNameAsSequenceKeyword_0_0_17() { return cNameAsSequenceKeyword_0_0_17; }
		
		//"sum"
		public Keyword getNameSumKeyword_0_0_18() { return cNameSumKeyword_0_0_18; }
		
		//"asSet"
		public Keyword getNameAsSetKeyword_0_0_19() { return cNameAsSetKeyword_0_0_19; }
		
		//"flatten"
		public Keyword getNameFlattenKeyword_0_0_20() { return cNameFlattenKeyword_0_0_20; }
		
		//"first"
		public Keyword getNameFirstKeyword_0_0_21() { return cNameFirstKeyword_0_0_21; }
		
		//"last"
		public Keyword getNameLastKeyword_0_0_22() { return cNameLastKeyword_0_0_22; }
		
		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_1() { return cLeftParenthesisRightParenthesisKeyword_1; }
	}
	public class OneTypeParamFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.OneTypeParamFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final Keyword cNameOclTypeOfKeyword_0_0_0 = (Keyword)cNameAlternatives_0_0.eContents().get(0);
		private final Keyword cNameOclisKindOfKeyword_0_0_1 = (Keyword)cNameAlternatives_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTYPENAME_TERMINALTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OneTypeParamFunction:
		//    name=(
		//        "oclTypeOf" | "oclisKindOf"
		//    ) "("TYPENAME_TERMINAL")";
		@Override public ParserRule getRule() { return rule; }
		
		//name=(
		//    "oclTypeOf" | "oclisKindOf"
		//) "("TYPENAME_TERMINAL")"
		public Group getGroup() { return cGroup; }
		
		//name=(
		//    "oclTypeOf" | "oclisKindOf"
		//)
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//(
		//        "oclTypeOf" | "oclisKindOf"
		//    )
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }
		
		//"oclTypeOf"
		public Keyword getNameOclTypeOfKeyword_0_0_0() { return cNameOclTypeOfKeyword_0_0_0; }
		
		//"oclisKindOf"
		public Keyword getNameOclisKindOfKeyword_0_0_1() { return cNameOclisKindOfKeyword_0_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//TYPENAME_TERMINAL
		public RuleCall getTYPENAME_TERMINALTerminalRuleCall_2() { return cTYPENAME_TERMINALTerminalRuleCall_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class OneStringParamFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.OneStringParamFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final Keyword cNameConcatKeyword_0_0_0 = (Keyword)cNameAlternatives_0_0.eContents().get(0);
		private final Keyword cNameStartsWithKeyword_0_0_1 = (Keyword)cNameAlternatives_0_0.eContents().get(1);
		private final Keyword cNameEndsWithKeyword_0_0_2 = (Keyword)cNameAlternatives_0_0.eContents().get(2);
		private final Keyword cNameIndexOfKeyword_0_0_3 = (Keyword)cNameAlternatives_0_0.eContents().get(3);
		private final Keyword cNameLastIndexOfKeyword_0_0_4 = (Keyword)cNameAlternatives_0_0.eContents().get(4);
		private final Keyword cNameSplitKeyword_0_0_5 = (Keyword)cNameAlternatives_0_0.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OneStringParamFunction:
		//    name=(
		//        "concat" | "startsWith" | "endsWith" | "indexOf" | "lastIndexOf" | "split"
		//    ) "("STRING")";
		@Override public ParserRule getRule() { return rule; }
		
		//name=(
		//    "concat" | "startsWith" | "endsWith" | "indexOf" | "lastIndexOf" | "split"
		//) "("STRING")"
		public Group getGroup() { return cGroup; }
		
		//name=(
		//    "concat" | "startsWith" | "endsWith" | "indexOf" | "lastIndexOf" | "split"
		//)
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//(
		//        "concat" | "startsWith" | "endsWith" | "indexOf" | "lastIndexOf" | "split"
		//    )
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }
		
		//"concat"
		public Keyword getNameConcatKeyword_0_0_0() { return cNameConcatKeyword_0_0_0; }
		
		//"startsWith"
		public Keyword getNameStartsWithKeyword_0_0_1() { return cNameStartsWithKeyword_0_0_1; }
		
		//"endsWith"
		public Keyword getNameEndsWithKeyword_0_0_2() { return cNameEndsWithKeyword_0_0_2; }
		
		//"indexOf"
		public Keyword getNameIndexOfKeyword_0_0_3() { return cNameIndexOfKeyword_0_0_3; }
		
		//"lastIndexOf"
		public Keyword getNameLastIndexOfKeyword_0_0_4() { return cNameLastIndexOfKeyword_0_0_4; }
		
		//"split"
		public Keyword getNameSplitKeyword_0_0_5() { return cNameSplitKeyword_0_0_5; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class TwoStringParamFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.TwoStringParamFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final Keyword cNameReplaceAllKeyword_0_0_0 = (Keyword)cNameAlternatives_0_0.eContents().get(0);
		private final Keyword cNameRegexReplaceAllKeyword_0_0_1 = (Keyword)cNameAlternatives_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TwoStringParamFunction:
		//    name=(
		//        "replaceAll" | "regexReplaceAll"
		//    ) "("STRING","STRING")";
		@Override public ParserRule getRule() { return rule; }
		
		//name=(
		//    "replaceAll" | "regexReplaceAll"
		//) "("STRING","STRING")"
		public Group getGroup() { return cGroup; }
		
		//name=(
		//    "replaceAll" | "regexReplaceAll"
		//)
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//(
		//        "replaceAll" | "regexReplaceAll"
		//    )
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }
		
		//"replaceAll"
		public Keyword getNameReplaceAllKeyword_0_0_0() { return cNameReplaceAllKeyword_0_0_0; }
		
		//"regexReplaceAll"
		public Keyword getNameRegexReplaceAllKeyword_0_0_1() { return cNameRegexReplaceAllKeyword_0_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_4() { return cSTRINGTerminalRuleCall_4; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class OneIntegerParamFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.OneIntegerParamFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameAtKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNUMBERTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OneIntegerParamFunction:
		//    name=(
		//        "at"
		//    ) "("NUMBER")";
		@Override public ParserRule getRule() { return rule; }
		
		//name=(
		//    "at"
		//) "("NUMBER")"
		public Group getGroup() { return cGroup; }
		
		//name=(
		//    "at"
		//)
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//(
		//        "at"
		//    )
		public Keyword getNameAtKeyword_0_0() { return cNameAtKeyword_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_2() { return cNUMBERTerminalRuleCall_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class TwoIntegerParamFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.TwoIntegerParamFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final Keyword cNameSubstringKeyword_0_0_0 = (Keyword)cNameAlternatives_0_0.eContents().get(0);
		private final Keyword cNameSubSequenceKeyword_0_0_1 = (Keyword)cNameAlternatives_0_0.eContents().get(1);
		private final Keyword cNameSubOrderedSetKeyword_0_0_2 = (Keyword)cNameAlternatives_0_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNUMBERTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cNUMBERTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TwoIntegerParamFunction:
		//    name=(
		//        "substring" | "subSequence" | "subOrderedSet"
		//    ) "("NUMBER","NUMBER")";
		@Override public ParserRule getRule() { return rule; }
		
		//name=(
		//    "substring" | "subSequence" | "subOrderedSet"
		//) "("NUMBER","NUMBER")"
		public Group getGroup() { return cGroup; }
		
		//name=(
		//    "substring" | "subSequence" | "subOrderedSet"
		//)
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//(
		//        "substring" | "subSequence" | "subOrderedSet"
		//    )
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }
		
		//"substring"
		public Keyword getNameSubstringKeyword_0_0_0() { return cNameSubstringKeyword_0_0_0; }
		
		//"subSequence"
		public Keyword getNameSubSequenceKeyword_0_0_1() { return cNameSubSequenceKeyword_0_0_1; }
		
		//"subOrderedSet"
		public Keyword getNameSubOrderedSetKeyword_0_0_2() { return cNameSubOrderedSetKeyword_0_0_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_2() { return cNUMBERTerminalRuleCall_2; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_4() { return cNUMBERTerminalRuleCall_4; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class CollectionKindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.CollectionKind");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameSetKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameBagKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameSequenceKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameCollectionKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		
		//CollectionKind:
		//    name=("Set" | "Bag" | "Sequence" | "Collection");
		@Override public ParserRule getRule() { return rule; }
		
		//name=("Set" | "Bag" | "Sequence" | "Collection")
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//("Set" | "Bag" | "Sequence" | "Collection")
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//"Set"
		public Keyword getNameSetKeyword_0_0() { return cNameSetKeyword_0_0; }
		
		//"Bag"
		public Keyword getNameBagKeyword_0_1() { return cNameBagKeyword_0_1; }
		
		//"Sequence"
		public Keyword getNameSequenceKeyword_0_2() { return cNameSequenceKeyword_0_2; }
		
		//"Collection"
		public Keyword getNameCollectionKeyword_0_3() { return cNameCollectionKeyword_0_3; }
	}
	public class NavigationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.NavigationOperator");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameFullStopKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameHyphenMinusGreaterThanSignKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		
		//NavigationOperator:
		//    name=("." | "->");
		@Override public ParserRule getRule() { return rule; }
		
		//name=("." | "->")
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//("." | "->")
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//"."
		public Keyword getNameFullStopKeyword_0_0() { return cNameFullStopKeyword_0_0; }
		
		//"->"
		public Keyword getNameHyphenMinusGreaterThanSignKeyword_0_1() { return cNameHyphenMinusGreaterThanSignKeyword_0_1; }
	}
	public class UnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.UnaryOperator");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameHyphenMinusKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameNotKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		
		//UnaryOperator:
		//    name=("-" | "not");
		@Override public ParserRule getRule() { return rule; }
		
		//name=("-" | "not")
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//("-" | "not")
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//"-"
		public Keyword getNameHyphenMinusKeyword_0_0() { return cNameHyphenMinusKeyword_0_0; }
		
		//"not"
		public Keyword getNameNotKeyword_0_1() { return cNameNotKeyword_0_1; }
	}
	public class MultiplyOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.MultiplyOperator");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameAsteriskKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameSolidusKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		
		//MultiplyOperator:
		//    name=("*" | "/");
		@Override public ParserRule getRule() { return rule; }
		
		//name=("*" | "/")
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//("*" | "/")
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//"*"
		public Keyword getNameAsteriskKeyword_0_0() { return cNameAsteriskKeyword_0_0; }
		
		//"/"
		public Keyword getNameSolidusKeyword_0_1() { return cNameSolidusKeyword_0_1; }
	}
	public class AddOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.AddOperator");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNamePlusSignKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameHyphenMinusKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		
		//AddOperator:
		//    name=("+" | "-");
		@Override public ParserRule getRule() { return rule; }
		
		//name=("+" | "-")
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//("+" | "-")
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//"+"
		public Keyword getNamePlusSignKeyword_0_0() { return cNamePlusSignKeyword_0_0; }
		
		//"-"
		public Keyword getNameHyphenMinusKeyword_0_1() { return cNameHyphenMinusKeyword_0_1; }
	}
	public class RelationalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.RelationalOperator");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameEqualsSignKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameGreaterThanSignKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameLessThanSignKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameGreaterThanSignEqualsSignKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		private final Keyword cNameLessThanSignEqualsSignKeyword_0_4 = (Keyword)cNameAlternatives_0.eContents().get(4);
		private final Keyword cNameLessThanSignGreaterThanSignKeyword_0_5 = (Keyword)cNameAlternatives_0.eContents().get(5);
		
		//RelationalOperator:
		//     name=("=" | ">" | "<" | ">=" | "<=" | "<>");
		@Override public ParserRule getRule() { return rule; }
		
		//name=("=" | ">" | "<" | ">=" | "<=" | "<>")
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//("=" | ">" | "<" | ">=" | "<=" | "<>")
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//"="
		public Keyword getNameEqualsSignKeyword_0_0() { return cNameEqualsSignKeyword_0_0; }
		
		//">"
		public Keyword getNameGreaterThanSignKeyword_0_1() { return cNameGreaterThanSignKeyword_0_1; }
		
		//"<"
		public Keyword getNameLessThanSignKeyword_0_2() { return cNameLessThanSignKeyword_0_2; }
		
		//">="
		public Keyword getNameGreaterThanSignEqualsSignKeyword_0_3() { return cNameGreaterThanSignEqualsSignKeyword_0_3; }
		
		//"<="
		public Keyword getNameLessThanSignEqualsSignKeyword_0_4() { return cNameLessThanSignEqualsSignKeyword_0_4; }
		
		//"<>"
		public Keyword getNameLessThanSignGreaterThanSignKeyword_0_5() { return cNameLessThanSignGreaterThanSignKeyword_0_5; }
	}
	public class LogicalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.LogicalOperator");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameAndKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameOrKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameXorKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameImpliesKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		
		//LogicalOperator:
		//     name=("and" | "or" | "xor" | "implies");
		@Override public ParserRule getRule() { return rule; }
		
		//name=("and" | "or" | "xor" | "implies")
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//("and" | "or" | "xor" | "implies")
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//"and"
		public Keyword getNameAndKeyword_0_0() { return cNameAndKeyword_0_0; }
		
		//"or"
		public Keyword getNameOrKeyword_0_1() { return cNameOrKeyword_0_1; }
		
		//"xor"
		public Keyword getNameXorKeyword_0_2() { return cNameXorKeyword_0_2; }
		
		//"implies"
		public Keyword getNameImpliesKeyword_0_3() { return cNameImpliesKeyword_0_3; }
	}
	
	
	private final StartElements pStart;
	private final ContextExpressionElements pContextExpression;
	private final ExpressionElements pExpression;
	private final LogicalExpressionElements pLogicalExpression;
	private final RelationalExpressionElements pRelationalExpression;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final UnaryExpressionElements pUnaryExpression;
	private final PostfixExpressionElements pPostfixExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final IfExpressionElements pIfExpression;
	private final FeatureCallParametersElements pFeatureCallParameters;
	private final LiteralElements pLiteral;
	private final EnumerationTypeElements pEnumerationType;
	private final SimpleTypeSpecifierElements pSimpleTypeSpecifier;
	private final LiteralCollectionElements pLiteralCollection;
	private final ExpressionListOrRangeElements pExpressionListOrRange;
	private final FeatureCallElements pFeatureCall;
	private final QualifiersElements pQualifiers;
	private final DeclaratorElements pDeclarator;
	private final PathTypeNameElements pPathTypeName;
	private final PathNameElements pPathName;
	private final TimeExpressionElements pTimeExpression;
	private final ActualParameterListElements pActualParameterList;
	private final TypeNameElements pTypeName;
	private final NameElements pName;
	private final AttributeElements pAttribute;
	private final FunctionElements pFunction;
	private final NoParamFunctionElements pNoParamFunction;
	private final OneTypeParamFunctionElements pOneTypeParamFunction;
	private final OneStringParamFunctionElements pOneStringParamFunction;
	private final TwoStringParamFunctionElements pTwoStringParamFunction;
	private final OneIntegerParamFunctionElements pOneIntegerParamFunction;
	private final TwoIntegerParamFunctionElements pTwoIntegerParamFunction;
	private final CollectionKindElements pCollectionKind;
	private final NavigationOperatorElements pNavigationOperator;
	private final UnaryOperatorElements pUnaryOperator;
	private final MultiplyOperatorElements pMultiplyOperator;
	private final AddOperatorElements pAddOperator;
	private final RelationalOperatorElements pRelationalOperator;
	private final LogicalOperatorElements pLogicalOperator;
	private final TerminalRule tLOWER;
	private final TerminalRule tUPPER;
	private final TerminalRule tLETTER;
	private final TerminalRule tDIGIT;
	private final TerminalRule tNUMBER;
	private final TerminalRule tIDCHAR;
	private final TerminalRule tNAME_TERMINAL;
	private final TerminalRule tTYPENAME_TERMINAL;
	private final TerminalRule tDOUBLE_COLON;
	private final TerminalRule tCOLON;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public OclGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStart = new StartElements();
		this.pContextExpression = new ContextExpressionElements();
		this.pExpression = new ExpressionElements();
		this.pLogicalExpression = new LogicalExpressionElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pPostfixExpression = new PostfixExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pIfExpression = new IfExpressionElements();
		this.pFeatureCallParameters = new FeatureCallParametersElements();
		this.pLiteral = new LiteralElements();
		this.pEnumerationType = new EnumerationTypeElements();
		this.pSimpleTypeSpecifier = new SimpleTypeSpecifierElements();
		this.pLiteralCollection = new LiteralCollectionElements();
		this.pExpressionListOrRange = new ExpressionListOrRangeElements();
		this.pFeatureCall = new FeatureCallElements();
		this.pQualifiers = new QualifiersElements();
		this.pDeclarator = new DeclaratorElements();
		this.pPathTypeName = new PathTypeNameElements();
		this.pPathName = new PathNameElements();
		this.pTimeExpression = new TimeExpressionElements();
		this.pActualParameterList = new ActualParameterListElements();
		this.pTypeName = new TypeNameElements();
		this.pName = new NameElements();
		this.pAttribute = new AttributeElements();
		this.pFunction = new FunctionElements();
		this.pNoParamFunction = new NoParamFunctionElements();
		this.pOneTypeParamFunction = new OneTypeParamFunctionElements();
		this.pOneStringParamFunction = new OneStringParamFunctionElements();
		this.pTwoStringParamFunction = new TwoStringParamFunctionElements();
		this.pOneIntegerParamFunction = new OneIntegerParamFunctionElements();
		this.pTwoIntegerParamFunction = new TwoIntegerParamFunctionElements();
		this.pCollectionKind = new CollectionKindElements();
		this.pNavigationOperator = new NavigationOperatorElements();
		this.pUnaryOperator = new UnaryOperatorElements();
		this.pMultiplyOperator = new MultiplyOperatorElements();
		this.pAddOperator = new AddOperatorElements();
		this.pRelationalOperator = new RelationalOperatorElements();
		this.pLogicalOperator = new LogicalOperatorElements();
		this.tLOWER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.LOWER");
		this.tUPPER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.UPPER");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.LETTER");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.DIGIT");
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.NUMBER");
		this.tIDCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.IDCHAR");
		this.tNAME_TERMINAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.NAME_TERMINAL");
		this.tTYPENAME_TERMINAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.TYPENAME_TERMINAL");
		this.tDOUBLE_COLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.DOUBLE_COLON");
		this.tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.ocl.Ocl.COLON");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.ocl.Ocl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Start:
	//    (Expression)? | ContextExpression;
	public StartElements getStartAccess() {
		return pStart;
	}
	
	public ParserRule getStartRule() {
		return getStartAccess().getRule();
	}
	
	//ContextExpression:
	//    "context" TYPENAME_TERMINAL ("inv:"|"pre:"|"post:") Expression;
	public ContextExpressionElements getContextExpressionAccess() {
		return pContextExpression;
	}
	
	public ParserRule getContextExpressionRule() {
		return getContextExpressionAccess().getRule();
	}
	
	///* 6 */
	//Expression:
	//    LogicalExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	///* 7 */
	//LogicalExpression:
	//    (exp+=RelationalExpression)(op+=LogicalOperator exp+=RelationalExpression)*;
	public LogicalExpressionElements getLogicalExpressionAccess() {
		return pLogicalExpression;
	}
	
	public ParserRule getLogicalExpressionRule() {
		return getLogicalExpressionAccess().getRule();
	}
	
	///* 8 */
	//RelationalExpression:
	//    (exp+=AdditiveExpression)(op+=RelationalOperator exp+=AdditiveExpression)?;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	///* 9 */
	//AdditiveExpression:
	//    (exp+=MultiplicativeExpression)(op+=AddOperator exp+=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	///* 10 */
	//MultiplicativeExpression:
	//    (exp+=UnaryExpression)(op+=MultiplyOperator exp+=UnaryExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	///* 11 */
	//UnaryExpression:
	//     (op+=UnaryOperator)* exp=PostfixExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	///* 12 */
	//PostfixExpression:
	//    PrimaryExpression (op+=NavigationOperator features+=FeatureCall )*;
	public PostfixExpressionElements getPostfixExpressionAccess() {
		return pPostfixExpression;
	}
	
	public ParserRule getPostfixExpressionRule() {
		return getPostfixExpressionAccess().getRule();
	}
	
	///* 13 */
	//PrimaryExpression:
	//    LiteralCollection | Literal | FeatureCall | "(" Expression ")" | IfExpression;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	///* 14 */
	//IfExpression:
	//    "if" exp+=Expression "then" exp+=Expression ("else" exp+=Expression)? "endif";
	public IfExpressionElements getIfExpressionAccess() {
		return pIfExpression;
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}
	
	///* 15 */
	//FeatureCallParameters:
	//    '(' (decs=Declarator)? params=ActualParameterList ')';
	public FeatureCallParametersElements getFeatureCallParametersAccess() {
		return pFeatureCallParameters;
	}
	
	public ParserRule getFeatureCallParametersRule() {
		return getFeatureCallParametersAccess().getRule();
	}
	
	///* 16 */
	//Literal:
	//    name=STRING | name=NUMBER | '#'name=NAME_TERMINAL;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	///* 17 */
	//EnumerationType:
	//     "enum" '{' ('#'left=Name) (',''#'rights+=Name)* '}';
	public EnumerationTypeElements getEnumerationTypeAccess() {
		return pEnumerationType;
	}
	
	public ParserRule getEnumerationTypeRule() {
		return getEnumerationTypeAccess().getRule();
	}
	
	///* 18 */
	//SimpleTypeSpecifier:
	//    PathTypeName | EnumerationType;
	public SimpleTypeSpecifierElements getSimpleTypeSpecifierAccess() {
		return pSimpleTypeSpecifier;
	}
	
	public ParserRule getSimpleTypeSpecifierRule() {
		return getSimpleTypeSpecifierAccess().getRule();
	}
	
	///* 19 */
	//LiteralCollection:
	//    {LiteralCollection}
	//    name=CollectionKind "{" (exp=ExpressionListOrRange)? "}";
	public LiteralCollectionElements getLiteralCollectionAccess() {
		return pLiteralCollection;
	}
	
	public ParserRule getLiteralCollectionRule() {
		return getLiteralCollectionAccess().getRule();
	}
	
	///* 20 */
	//ExpressionListOrRange:
	//    exp+=Expression ( ( "," exp+=Expression )+ | ( ".." exp+=Expression ))?;
	public ExpressionListOrRangeElements getExpressionListOrRangeAccess() {
		return pExpressionListOrRange;
	}
	
	public ParserRule getExpressionListOrRangeRule() {
		return getExpressionListOrRangeAccess().getRule();
	}
	
	///* 21 */
	//FeatureCall:
	//    PathName (params+=TimeExpression)? (params+=Qualifiers)? (params+=FeatureCallParameters)?;
	public FeatureCallElements getFeatureCallAccess() {
		return pFeatureCall;
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}
	
	///* 22 */
	//Qualifiers:
	//    '[' ActualParameterList ']';
	public QualifiersElements getQualifiersAccess() {
		return pQualifiers;
	}
	
	public ParserRule getQualifiersRule() {
		return getQualifiersAccess().getRule();
	}
	
	///* 23 */
	//Declarator:
	//    name+=Name(',' name+=Name)* (COLON type=SimpleTypeSpecifier)? '|';
	public DeclaratorElements getDeclaratorAccess() {
		return pDeclarator;
	}
	
	public ParserRule getDeclaratorRule() {
		return getDeclaratorAccess().getRule();
	}
	
	///* 24 */
	//PathTypeName:
	//    (left=TypeName)(DOUBLE_COLON(rights+=TypeName))*;
	public PathTypeNameElements getPathTypeNameAccess() {
		return pPathTypeName;
	}
	
	public ParserRule getPathTypeNameRule() {
		return getPathTypeNameAccess().getRule();
	}
	
	///* 25 */
	//PathName:
	//    (left=(TypeName | Name))(DOUBLE_COLON(rights+=(TypeName | Name)))*;
	public PathNameElements getPathNameAccess() {
		return pPathName;
	}
	
	public ParserRule getPathNameRule() {
		return getPathNameAccess().getRule();
	}
	
	///* 26 */
	//TimeExpression:
	//    '@' name=NAME_TERMINAL;
	public TimeExpressionElements getTimeExpressionAccess() {
		return pTimeExpression;
	}
	
	public ParserRule getTimeExpressionRule() {
		return getTimeExpressionAccess().getRule();
	}
	
	///* 27 */
	//ActualParameterList:
	//    exp+=Expression (','exp+=Expression)*;
	public ActualParameterListElements getActualParameterListAccess() {
		return pActualParameterList;
	}
	
	public ParserRule getActualParameterListRule() {
		return getActualParameterListAccess().getRule();
	}
	
	///* LEXICON */
	//TypeName:
	//    name=TYPENAME_TERMINAL;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	//Name:
	//    Attribute | Function;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//Attribute:
	//    name=NAME_TERMINAL;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	///* FUNCTION */
	//Function:
	//    NoParamFunction | OneTypeParamFunction | OneStringParamFunction | TwoStringParamFunction | TwoIntegerParamFunction |
	//    OneIntegerParamFunction;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//NoParamFunction:
	//    name=(
	//        "allInstaces" | "oclType" | "toString" | "refImmediateComposite" | "size" | "toInteger" | "toUpper" |
	//        "toReal" | "toLower" | "toSequence" | "trim" | "isEmpty" | "oclIsUndefined" | "floor" | "round"  | "notEmpty" |
	//        "asBag" | "asSequence" | "sum" | "asSet" | "flatten" | "first" | "last"
	//    ) "()";
	public NoParamFunctionElements getNoParamFunctionAccess() {
		return pNoParamFunction;
	}
	
	public ParserRule getNoParamFunctionRule() {
		return getNoParamFunctionAccess().getRule();
	}
	
	//OneTypeParamFunction:
	//    name=(
	//        "oclTypeOf" | "oclisKindOf"
	//    ) "("TYPENAME_TERMINAL")";
	public OneTypeParamFunctionElements getOneTypeParamFunctionAccess() {
		return pOneTypeParamFunction;
	}
	
	public ParserRule getOneTypeParamFunctionRule() {
		return getOneTypeParamFunctionAccess().getRule();
	}
	
	//OneStringParamFunction:
	//    name=(
	//        "concat" | "startsWith" | "endsWith" | "indexOf" | "lastIndexOf" | "split"
	//    ) "("STRING")";
	public OneStringParamFunctionElements getOneStringParamFunctionAccess() {
		return pOneStringParamFunction;
	}
	
	public ParserRule getOneStringParamFunctionRule() {
		return getOneStringParamFunctionAccess().getRule();
	}
	
	//TwoStringParamFunction:
	//    name=(
	//        "replaceAll" | "regexReplaceAll"
	//    ) "("STRING","STRING")";
	public TwoStringParamFunctionElements getTwoStringParamFunctionAccess() {
		return pTwoStringParamFunction;
	}
	
	public ParserRule getTwoStringParamFunctionRule() {
		return getTwoStringParamFunctionAccess().getRule();
	}
	
	//OneIntegerParamFunction:
	//    name=(
	//        "at"
	//    ) "("NUMBER")";
	public OneIntegerParamFunctionElements getOneIntegerParamFunctionAccess() {
		return pOneIntegerParamFunction;
	}
	
	public ParserRule getOneIntegerParamFunctionRule() {
		return getOneIntegerParamFunctionAccess().getRule();
	}
	
	//TwoIntegerParamFunction:
	//    name=(
	//        "substring" | "subSequence" | "subOrderedSet"
	//    ) "("NUMBER","NUMBER")";
	public TwoIntegerParamFunctionElements getTwoIntegerParamFunctionAccess() {
		return pTwoIntegerParamFunction;
	}
	
	public ParserRule getTwoIntegerParamFunctionRule() {
		return getTwoIntegerParamFunctionAccess().getRule();
	}
	
	//CollectionKind:
	//    name=("Set" | "Bag" | "Sequence" | "Collection");
	public CollectionKindElements getCollectionKindAccess() {
		return pCollectionKind;
	}
	
	public ParserRule getCollectionKindRule() {
		return getCollectionKindAccess().getRule();
	}
	
	//NavigationOperator:
	//    name=("." | "->");
	public NavigationOperatorElements getNavigationOperatorAccess() {
		return pNavigationOperator;
	}
	
	public ParserRule getNavigationOperatorRule() {
		return getNavigationOperatorAccess().getRule();
	}
	
	//UnaryOperator:
	//    name=("-" | "not");
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return pUnaryOperator;
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//MultiplyOperator:
	//    name=("*" | "/");
	public MultiplyOperatorElements getMultiplyOperatorAccess() {
		return pMultiplyOperator;
	}
	
	public ParserRule getMultiplyOperatorRule() {
		return getMultiplyOperatorAccess().getRule();
	}
	
	//AddOperator:
	//    name=("+" | "-");
	public AddOperatorElements getAddOperatorAccess() {
		return pAddOperator;
	}
	
	public ParserRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}
	
	//RelationalOperator:
	//     name=("=" | ">" | "<" | ">=" | "<=" | "<>");
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return pRelationalOperator;
	}
	
	public ParserRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}
	
	//LogicalOperator:
	//     name=("and" | "or" | "xor" | "implies");
	public LogicalOperatorElements getLogicalOperatorAccess() {
		return pLogicalOperator;
	}
	
	public ParserRule getLogicalOperatorRule() {
		return getLogicalOperatorAccess().getRule();
	}
	
	//terminal LOWER: 'a'..'z';
	public TerminalRule getLOWERRule() {
		return tLOWER;
	}
	
	//terminal UPPER: 'A'..'Z';
	public TerminalRule getUPPERRule() {
		return tUPPER;
	}
	
	//terminal LETTER: UPPER | LOWER;
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal DIGIT: '0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal NUMBER: (DIGIT)+;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	}
	
	//terminal IDCHAR: LETTER | DIGIT | '_' ;
	public TerminalRule getIDCHARRule() {
		return tIDCHAR;
	}
	
	//terminal NAME_TERMINAL: LOWER(IDCHAR)*;
	public TerminalRule getNAME_TERMINALRule() {
		return tNAME_TERMINAL;
	}
	
	//terminal TYPENAME_TERMINAL: UPPER(IDCHAR)*;
	public TerminalRule getTYPENAME_TERMINALRule() {
		return tTYPENAME_TERMINAL;
	}
	
	//terminal DOUBLE_COLON: COLON COLON;
	public TerminalRule getDOUBLE_COLONRule() {
		return tDOUBLE_COLON;
	}
	
	//terminal COLON: ':';
	public TerminalRule getCOLONRule() {
		return tCOLON;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
