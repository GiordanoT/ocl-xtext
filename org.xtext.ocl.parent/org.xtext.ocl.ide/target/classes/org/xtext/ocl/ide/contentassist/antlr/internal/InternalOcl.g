/*
 * generated by Xtext 2.26.0-SNAPSHOT
 */
grammar InternalOcl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.ocl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.ocl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.ocl.services.OclGrammarAccess;

}
@parser::members {
	private OclGrammarAccess grammarAccess;

	public void setGrammarAccess(OclGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleStart
entryRuleStart
:
{ before(grammarAccess.getStartRule()); }
	 ruleStart
{ after(grammarAccess.getStartRule()); } 
	 EOF 
;

// Rule Start
ruleStart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStartAccess().getAlternatives()); }
		(rule__Start__Alternatives)
		{ after(grammarAccess.getStartAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContextExpression
entryRuleContextExpression
:
{ before(grammarAccess.getContextExpressionRule()); }
	 ruleContextExpression
{ after(grammarAccess.getContextExpressionRule()); } 
	 EOF 
;

// Rule ContextExpression
ruleContextExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContextExpressionAccess().getGroup()); }
		(rule__ContextExpression__Group__0)
		{ after(grammarAccess.getContextExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getLogicalExpressionParserRuleCall()); }
		ruleLogicalExpression
		{ after(grammarAccess.getExpressionAccess().getLogicalExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalExpression
entryRuleLogicalExpression
:
{ before(grammarAccess.getLogicalExpressionRule()); }
	 ruleLogicalExpression
{ after(grammarAccess.getLogicalExpressionRule()); } 
	 EOF 
;

// Rule LogicalExpression
ruleLogicalExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalExpressionAccess().getGroup()); }
		(rule__LogicalExpression__Group__0)
		{ after(grammarAccess.getLogicalExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
		(rule__RelationalExpression__Group__0)
		{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
		(rule__AdditiveExpression__Group__0)
		{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
		(rule__MultiplicativeExpression__Group__0)
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getGroup()); }
		(rule__UnaryExpression__Group__0)
		{ after(grammarAccess.getUnaryExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePostfixExpression
entryRulePostfixExpression
:
{ before(grammarAccess.getPostfixExpressionRule()); }
	 rulePostfixExpression
{ after(grammarAccess.getPostfixExpressionRule()); } 
	 EOF 
;

// Rule PostfixExpression
rulePostfixExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPostfixExpressionAccess().getGroup()); }
		(rule__PostfixExpression__Group__0)
		{ after(grammarAccess.getPostfixExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
		(rule__PrimaryExpression__Alternatives)
		{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfExpression
entryRuleIfExpression
:
{ before(grammarAccess.getIfExpressionRule()); }
	 ruleIfExpression
{ after(grammarAccess.getIfExpressionRule()); } 
	 EOF 
;

// Rule IfExpression
ruleIfExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfExpressionAccess().getGroup()); }
		(rule__IfExpression__Group__0)
		{ after(grammarAccess.getIfExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeatureCallParameters
entryRuleFeatureCallParameters
:
{ before(grammarAccess.getFeatureCallParametersRule()); }
	 ruleFeatureCallParameters
{ after(grammarAccess.getFeatureCallParametersRule()); } 
	 EOF 
;

// Rule FeatureCallParameters
ruleFeatureCallParameters 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureCallParametersAccess().getGroup()); }
		(rule__FeatureCallParameters__Group__0)
		{ after(grammarAccess.getFeatureCallParametersAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteral
entryRuleLiteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
		(rule__Literal__Alternatives)
		{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumerationType
entryRuleEnumerationType
:
{ before(grammarAccess.getEnumerationTypeRule()); }
	 ruleEnumerationType
{ after(grammarAccess.getEnumerationTypeRule()); } 
	 EOF 
;

// Rule EnumerationType
ruleEnumerationType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumerationTypeAccess().getGroup()); }
		(rule__EnumerationType__Group__0)
		{ after(grammarAccess.getEnumerationTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleTypeSpecifier
entryRuleSimpleTypeSpecifier
:
{ before(grammarAccess.getSimpleTypeSpecifierRule()); }
	 ruleSimpleTypeSpecifier
{ after(grammarAccess.getSimpleTypeSpecifierRule()); } 
	 EOF 
;

// Rule SimpleTypeSpecifier
ruleSimpleTypeSpecifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleTypeSpecifierAccess().getAlternatives()); }
		(rule__SimpleTypeSpecifier__Alternatives)
		{ after(grammarAccess.getSimpleTypeSpecifierAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteralCollection
entryRuleLiteralCollection
:
{ before(grammarAccess.getLiteralCollectionRule()); }
	 ruleLiteralCollection
{ after(grammarAccess.getLiteralCollectionRule()); } 
	 EOF 
;

// Rule LiteralCollection
ruleLiteralCollection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralCollectionAccess().getGroup()); }
		(rule__LiteralCollection__Group__0)
		{ after(grammarAccess.getLiteralCollectionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpressionListOrRange
entryRuleExpressionListOrRange
:
{ before(grammarAccess.getExpressionListOrRangeRule()); }
	 ruleExpressionListOrRange
{ after(grammarAccess.getExpressionListOrRangeRule()); } 
	 EOF 
;

// Rule ExpressionListOrRange
ruleExpressionListOrRange 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionListOrRangeAccess().getGroup()); }
		(rule__ExpressionListOrRange__Group__0)
		{ after(grammarAccess.getExpressionListOrRangeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeatureCall
entryRuleFeatureCall
:
{ before(grammarAccess.getFeatureCallRule()); }
	 ruleFeatureCall
{ after(grammarAccess.getFeatureCallRule()); } 
	 EOF 
;

// Rule FeatureCall
ruleFeatureCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureCallAccess().getGroup()); }
		(rule__FeatureCall__Group__0)
		{ after(grammarAccess.getFeatureCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiers
entryRuleQualifiers
:
{ before(grammarAccess.getQualifiersRule()); }
	 ruleQualifiers
{ after(grammarAccess.getQualifiersRule()); } 
	 EOF 
;

// Rule Qualifiers
ruleQualifiers 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiersAccess().getGroup()); }
		(rule__Qualifiers__Group__0)
		{ after(grammarAccess.getQualifiersAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclarator
entryRuleDeclarator
:
{ before(grammarAccess.getDeclaratorRule()); }
	 ruleDeclarator
{ after(grammarAccess.getDeclaratorRule()); } 
	 EOF 
;

// Rule Declarator
ruleDeclarator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclaratorAccess().getGroup()); }
		(rule__Declarator__Group__0)
		{ after(grammarAccess.getDeclaratorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePathTypeName
entryRulePathTypeName
:
{ before(grammarAccess.getPathTypeNameRule()); }
	 rulePathTypeName
{ after(grammarAccess.getPathTypeNameRule()); } 
	 EOF 
;

// Rule PathTypeName
rulePathTypeName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPathTypeNameAccess().getGroup()); }
		(rule__PathTypeName__Group__0)
		{ after(grammarAccess.getPathTypeNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePathName
entryRulePathName
:
{ before(grammarAccess.getPathNameRule()); }
	 rulePathName
{ after(grammarAccess.getPathNameRule()); } 
	 EOF 
;

// Rule PathName
rulePathName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPathNameAccess().getGroup()); }
		(rule__PathName__Group__0)
		{ after(grammarAccess.getPathNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTimeExpression
entryRuleTimeExpression
:
{ before(grammarAccess.getTimeExpressionRule()); }
	 ruleTimeExpression
{ after(grammarAccess.getTimeExpressionRule()); } 
	 EOF 
;

// Rule TimeExpression
ruleTimeExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimeExpressionAccess().getGroup()); }
		(rule__TimeExpression__Group__0)
		{ after(grammarAccess.getTimeExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActualParameterList
entryRuleActualParameterList
:
{ before(grammarAccess.getActualParameterListRule()); }
	 ruleActualParameterList
{ after(grammarAccess.getActualParameterListRule()); } 
	 EOF 
;

// Rule ActualParameterList
ruleActualParameterList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActualParameterListAccess().getGroup()); }
		(rule__ActualParameterList__Group__0)
		{ after(grammarAccess.getActualParameterListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeName
entryRuleTypeName
:
{ before(grammarAccess.getTypeNameRule()); }
	 ruleTypeName
{ after(grammarAccess.getTypeNameRule()); } 
	 EOF 
;

// Rule TypeName
ruleTypeName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeNameAccess().getNameAssignment()); }
		(rule__TypeName__NameAssignment)
		{ after(grammarAccess.getTypeNameAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleName
entryRuleName
:
{ before(grammarAccess.getNameRule()); }
	 ruleName
{ after(grammarAccess.getNameRule()); } 
	 EOF 
;

// Rule Name
ruleName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNameAccess().getAlternatives()); }
		(rule__Name__Alternatives)
		{ after(grammarAccess.getNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttribute
entryRuleAttribute
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeAccess().getNameAssignment()); }
		(rule__Attribute__NameAssignment)
		{ after(grammarAccess.getAttributeAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getAlternatives()); }
		(rule__Function__Alternatives)
		{ after(grammarAccess.getFunctionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNoParamFunction
entryRuleNoParamFunction
:
{ before(grammarAccess.getNoParamFunctionRule()); }
	 ruleNoParamFunction
{ after(grammarAccess.getNoParamFunctionRule()); } 
	 EOF 
;

// Rule NoParamFunction
ruleNoParamFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getGroup()); }
		(rule__NoParamFunction__Group__0)
		{ after(grammarAccess.getNoParamFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOneTypeParamFunction
entryRuleOneTypeParamFunction
:
{ before(grammarAccess.getOneTypeParamFunctionRule()); }
	 ruleOneTypeParamFunction
{ after(grammarAccess.getOneTypeParamFunctionRule()); } 
	 EOF 
;

// Rule OneTypeParamFunction
ruleOneTypeParamFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOneTypeParamFunctionAccess().getGroup()); }
		(rule__OneTypeParamFunction__Group__0)
		{ after(grammarAccess.getOneTypeParamFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOneStringParamFunction
entryRuleOneStringParamFunction
:
{ before(grammarAccess.getOneStringParamFunctionRule()); }
	 ruleOneStringParamFunction
{ after(grammarAccess.getOneStringParamFunctionRule()); } 
	 EOF 
;

// Rule OneStringParamFunction
ruleOneStringParamFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOneStringParamFunctionAccess().getGroup()); }
		(rule__OneStringParamFunction__Group__0)
		{ after(grammarAccess.getOneStringParamFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTwoStringParamFunction
entryRuleTwoStringParamFunction
:
{ before(grammarAccess.getTwoStringParamFunctionRule()); }
	 ruleTwoStringParamFunction
{ after(grammarAccess.getTwoStringParamFunctionRule()); } 
	 EOF 
;

// Rule TwoStringParamFunction
ruleTwoStringParamFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTwoStringParamFunctionAccess().getGroup()); }
		(rule__TwoStringParamFunction__Group__0)
		{ after(grammarAccess.getTwoStringParamFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOneIntegerParamFunction
entryRuleOneIntegerParamFunction
:
{ before(grammarAccess.getOneIntegerParamFunctionRule()); }
	 ruleOneIntegerParamFunction
{ after(grammarAccess.getOneIntegerParamFunctionRule()); } 
	 EOF 
;

// Rule OneIntegerParamFunction
ruleOneIntegerParamFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOneIntegerParamFunctionAccess().getGroup()); }
		(rule__OneIntegerParamFunction__Group__0)
		{ after(grammarAccess.getOneIntegerParamFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTwoIntegerParamFunction
entryRuleTwoIntegerParamFunction
:
{ before(grammarAccess.getTwoIntegerParamFunctionRule()); }
	 ruleTwoIntegerParamFunction
{ after(grammarAccess.getTwoIntegerParamFunctionRule()); } 
	 EOF 
;

// Rule TwoIntegerParamFunction
ruleTwoIntegerParamFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTwoIntegerParamFunctionAccess().getGroup()); }
		(rule__TwoIntegerParamFunction__Group__0)
		{ after(grammarAccess.getTwoIntegerParamFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCollectionKind
entryRuleCollectionKind
:
{ before(grammarAccess.getCollectionKindRule()); }
	 ruleCollectionKind
{ after(grammarAccess.getCollectionKindRule()); } 
	 EOF 
;

// Rule CollectionKind
ruleCollectionKind 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCollectionKindAccess().getNameAssignment()); }
		(rule__CollectionKind__NameAssignment)
		{ after(grammarAccess.getCollectionKindAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNavigationOperator
entryRuleNavigationOperator
:
{ before(grammarAccess.getNavigationOperatorRule()); }
	 ruleNavigationOperator
{ after(grammarAccess.getNavigationOperatorRule()); } 
	 EOF 
;

// Rule NavigationOperator
ruleNavigationOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNavigationOperatorAccess().getNameAssignment()); }
		(rule__NavigationOperator__NameAssignment)
		{ after(grammarAccess.getNavigationOperatorAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator
:
{ before(grammarAccess.getUnaryOperatorRule()); }
	 ruleUnaryOperator
{ after(grammarAccess.getUnaryOperatorRule()); } 
	 EOF 
;

// Rule UnaryOperator
ruleUnaryOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getNameAssignment()); }
		(rule__UnaryOperator__NameAssignment)
		{ after(grammarAccess.getUnaryOperatorAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplyOperator
entryRuleMultiplyOperator
:
{ before(grammarAccess.getMultiplyOperatorRule()); }
	 ruleMultiplyOperator
{ after(grammarAccess.getMultiplyOperatorRule()); } 
	 EOF 
;

// Rule MultiplyOperator
ruleMultiplyOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplyOperatorAccess().getNameAssignment()); }
		(rule__MultiplyOperator__NameAssignment)
		{ after(grammarAccess.getMultiplyOperatorAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddOperator
entryRuleAddOperator
:
{ before(grammarAccess.getAddOperatorRule()); }
	 ruleAddOperator
{ after(grammarAccess.getAddOperatorRule()); } 
	 EOF 
;

// Rule AddOperator
ruleAddOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAddOperatorAccess().getNameAssignment()); }
		(rule__AddOperator__NameAssignment)
		{ after(grammarAccess.getAddOperatorAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationalOperator
entryRuleRelationalOperator
:
{ before(grammarAccess.getRelationalOperatorRule()); }
	 ruleRelationalOperator
{ after(grammarAccess.getRelationalOperatorRule()); } 
	 EOF 
;

// Rule RelationalOperator
ruleRelationalOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getNameAssignment()); }
		(rule__RelationalOperator__NameAssignment)
		{ after(grammarAccess.getRelationalOperatorAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalOperator
entryRuleLogicalOperator
:
{ before(grammarAccess.getLogicalOperatorRule()); }
	 ruleLogicalOperator
{ after(grammarAccess.getLogicalOperatorRule()); } 
	 EOF 
;

// Rule LogicalOperator
ruleLogicalOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getNameAssignment()); }
		(rule__LogicalOperator__NameAssignment)
		{ after(grammarAccess.getLogicalOperatorAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Start__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStartAccess().getExpressionParserRuleCall_0()); }
		(ruleExpression)?
		{ after(grammarAccess.getStartAccess().getExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStartAccess().getContextExpressionParserRuleCall_1()); }
		ruleContextExpression
		{ after(grammarAccess.getStartAccess().getContextExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextExpression__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContextExpressionAccess().getInvKeyword_2_0()); }
		'inv:'
		{ after(grammarAccess.getContextExpressionAccess().getInvKeyword_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getContextExpressionAccess().getPreKeyword_2_1()); }
		'pre:'
		{ after(grammarAccess.getContextExpressionAccess().getPreKeyword_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getContextExpressionAccess().getPostKeyword_2_2()); }
		'post:'
		{ after(grammarAccess.getContextExpressionAccess().getPostKeyword_2_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralCollectionParserRuleCall_0()); }
		ruleLiteralCollection
		{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralCollectionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_1()); }
		ruleLiteral
		{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_2()); }
		ruleFeatureCall
		{ after(grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_3()); }
		(rule__PrimaryExpression__Group_3__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getIfExpressionParserRuleCall_4()); }
		ruleIfExpression
		{ after(grammarAccess.getPrimaryExpressionAccess().getIfExpressionParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getNameAssignment_0()); }
		(rule__Literal__NameAssignment_0)
		{ after(grammarAccess.getLiteralAccess().getNameAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getNameAssignment_1()); }
		(rule__Literal__NameAssignment_1)
		{ after(grammarAccess.getLiteralAccess().getNameAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getGroup_2()); }
		(rule__Literal__Group_2__0)
		{ after(grammarAccess.getLiteralAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypeSpecifier__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleTypeSpecifierAccess().getPathTypeNameParserRuleCall_0()); }
		rulePathTypeName
		{ after(grammarAccess.getSimpleTypeSpecifierAccess().getPathTypeNameParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleTypeSpecifierAccess().getEnumerationTypeParserRuleCall_1()); }
		ruleEnumerationType
		{ after(grammarAccess.getSimpleTypeSpecifierAccess().getEnumerationTypeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionListOrRange__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		(
			{ before(grammarAccess.getExpressionListOrRangeAccess().getGroup_1_0()); }
			(rule__ExpressionListOrRange__Group_1_0__0)
			{ after(grammarAccess.getExpressionListOrRangeAccess().getGroup_1_0()); }
		)
		(
			{ before(grammarAccess.getExpressionListOrRangeAccess().getGroup_1_0()); }
			(rule__ExpressionListOrRange__Group_1_0__0)*
			{ after(grammarAccess.getExpressionListOrRangeAccess().getGroup_1_0()); }
		)
	)
	|
	(
		{ before(grammarAccess.getExpressionListOrRangeAccess().getGroup_1_1()); }
		(rule__ExpressionListOrRange__Group_1_1__0)
		{ after(grammarAccess.getExpressionListOrRangeAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathName__LeftAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPathNameAccess().getLeftTypeNameParserRuleCall_0_0_0()); }
		ruleTypeName
		{ after(grammarAccess.getPathNameAccess().getLeftTypeNameParserRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPathNameAccess().getLeftNameParserRuleCall_0_0_1()); }
		ruleName
		{ after(grammarAccess.getPathNameAccess().getLeftNameParserRuleCall_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathName__RightsAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPathNameAccess().getRightsTypeNameParserRuleCall_1_1_0_0()); }
		ruleTypeName
		{ after(grammarAccess.getPathNameAccess().getRightsTypeNameParserRuleCall_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPathNameAccess().getRightsNameParserRuleCall_1_1_0_1()); }
		ruleName
		{ after(grammarAccess.getPathNameAccess().getRightsNameParserRuleCall_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNameAccess().getAttributeParserRuleCall_0()); }
		ruleAttribute
		{ after(grammarAccess.getNameAccess().getAttributeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNameAccess().getFunctionParserRuleCall_1()); }
		ruleFunction
		{ after(grammarAccess.getNameAccess().getFunctionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNoParamFunctionParserRuleCall_0()); }
		ruleNoParamFunction
		{ after(grammarAccess.getFunctionAccess().getNoParamFunctionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionAccess().getOneTypeParamFunctionParserRuleCall_1()); }
		ruleOneTypeParamFunction
		{ after(grammarAccess.getFunctionAccess().getOneTypeParamFunctionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionAccess().getOneStringParamFunctionParserRuleCall_2()); }
		ruleOneStringParamFunction
		{ after(grammarAccess.getFunctionAccess().getOneStringParamFunctionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionAccess().getTwoStringParamFunctionParserRuleCall_3()); }
		ruleTwoStringParamFunction
		{ after(grammarAccess.getFunctionAccess().getTwoStringParamFunctionParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionAccess().getTwoIntegerParamFunctionParserRuleCall_4()); }
		ruleTwoIntegerParamFunction
		{ after(grammarAccess.getFunctionAccess().getTwoIntegerParamFunctionParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionAccess().getOneIntegerParamFunctionParserRuleCall_5()); }
		ruleOneIntegerParamFunction
		{ after(grammarAccess.getFunctionAccess().getOneIntegerParamFunctionParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NoParamFunction__NameAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameAllInstacesKeyword_0_0_0()); }
		'allInstaces'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameAllInstacesKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameOclTypeKeyword_0_0_1()); }
		'oclType'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameOclTypeKeyword_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameToStringKeyword_0_0_2()); }
		'toString'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameToStringKeyword_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameRefImmediateCompositeKeyword_0_0_3()); }
		'refImmediateComposite'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameRefImmediateCompositeKeyword_0_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameSizeKeyword_0_0_4()); }
		'size'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameSizeKeyword_0_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameToIntegerKeyword_0_0_5()); }
		'toInteger'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameToIntegerKeyword_0_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameToUpperKeyword_0_0_6()); }
		'toUpper'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameToUpperKeyword_0_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameToRealKeyword_0_0_7()); }
		'toReal'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameToRealKeyword_0_0_7()); }
	)
	|
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameToLowerKeyword_0_0_8()); }
		'toLower'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameToLowerKeyword_0_0_8()); }
	)
	|
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameToSequenceKeyword_0_0_9()); }
		'toSequence'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameToSequenceKeyword_0_0_9()); }
	)
	|
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameTrimKeyword_0_0_10()); }
		'trim'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameTrimKeyword_0_0_10()); }
	)
	|
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameIsEmptyKeyword_0_0_11()); }
		'isEmpty'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameIsEmptyKeyword_0_0_11()); }
	)
	|
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameOclIsUndefinedKeyword_0_0_12()); }
		'oclIsUndefined'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameOclIsUndefinedKeyword_0_0_12()); }
	)
	|
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameFloorKeyword_0_0_13()); }
		'floor'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameFloorKeyword_0_0_13()); }
	)
	|
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameRoundKeyword_0_0_14()); }
		'round'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameRoundKeyword_0_0_14()); }
	)
	|
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameNotEmptyKeyword_0_0_15()); }
		'notEmpty'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameNotEmptyKeyword_0_0_15()); }
	)
	|
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameAsBagKeyword_0_0_16()); }
		'asBag'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameAsBagKeyword_0_0_16()); }
	)
	|
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameAsSequenceKeyword_0_0_17()); }
		'asSequence'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameAsSequenceKeyword_0_0_17()); }
	)
	|
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameSumKeyword_0_0_18()); }
		'sum'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameSumKeyword_0_0_18()); }
	)
	|
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameAsSetKeyword_0_0_19()); }
		'asSet'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameAsSetKeyword_0_0_19()); }
	)
	|
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameFlattenKeyword_0_0_20()); }
		'flatten'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameFlattenKeyword_0_0_20()); }
	)
	|
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameFirstKeyword_0_0_21()); }
		'first'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameFirstKeyword_0_0_21()); }
	)
	|
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameLastKeyword_0_0_22()); }
		'last'
		{ after(grammarAccess.getNoParamFunctionAccess().getNameLastKeyword_0_0_22()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OneTypeParamFunction__NameAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOneTypeParamFunctionAccess().getNameOclTypeOfKeyword_0_0_0()); }
		'oclTypeOf'
		{ after(grammarAccess.getOneTypeParamFunctionAccess().getNameOclTypeOfKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getOneTypeParamFunctionAccess().getNameOclisKindOfKeyword_0_0_1()); }
		'oclisKindOf'
		{ after(grammarAccess.getOneTypeParamFunctionAccess().getNameOclisKindOfKeyword_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OneStringParamFunction__NameAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOneStringParamFunctionAccess().getNameConcatKeyword_0_0_0()); }
		'concat'
		{ after(grammarAccess.getOneStringParamFunctionAccess().getNameConcatKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getOneStringParamFunctionAccess().getNameStartsWithKeyword_0_0_1()); }
		'startsWith'
		{ after(grammarAccess.getOneStringParamFunctionAccess().getNameStartsWithKeyword_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getOneStringParamFunctionAccess().getNameEndsWithKeyword_0_0_2()); }
		'endsWith'
		{ after(grammarAccess.getOneStringParamFunctionAccess().getNameEndsWithKeyword_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getOneStringParamFunctionAccess().getNameIndexOfKeyword_0_0_3()); }
		'indexOf'
		{ after(grammarAccess.getOneStringParamFunctionAccess().getNameIndexOfKeyword_0_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getOneStringParamFunctionAccess().getNameLastIndexOfKeyword_0_0_4()); }
		'lastIndexOf'
		{ after(grammarAccess.getOneStringParamFunctionAccess().getNameLastIndexOfKeyword_0_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getOneStringParamFunctionAccess().getNameSplitKeyword_0_0_5()); }
		'split'
		{ after(grammarAccess.getOneStringParamFunctionAccess().getNameSplitKeyword_0_0_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoStringParamFunction__NameAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTwoStringParamFunctionAccess().getNameReplaceAllKeyword_0_0_0()); }
		'replaceAll'
		{ after(grammarAccess.getTwoStringParamFunctionAccess().getNameReplaceAllKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTwoStringParamFunctionAccess().getNameRegexReplaceAllKeyword_0_0_1()); }
		'regexReplaceAll'
		{ after(grammarAccess.getTwoStringParamFunctionAccess().getNameRegexReplaceAllKeyword_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoIntegerParamFunction__NameAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTwoIntegerParamFunctionAccess().getNameSubstringKeyword_0_0_0()); }
		'substring'
		{ after(grammarAccess.getTwoIntegerParamFunctionAccess().getNameSubstringKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTwoIntegerParamFunctionAccess().getNameSubSequenceKeyword_0_0_1()); }
		'subSequence'
		{ after(grammarAccess.getTwoIntegerParamFunctionAccess().getNameSubSequenceKeyword_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getTwoIntegerParamFunctionAccess().getNameSubOrderedSetKeyword_0_0_2()); }
		'subOrderedSet'
		{ after(grammarAccess.getTwoIntegerParamFunctionAccess().getNameSubOrderedSetKeyword_0_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionKind__NameAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionKindAccess().getNameSetKeyword_0_0()); }
		'Set'
		{ after(grammarAccess.getCollectionKindAccess().getNameSetKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCollectionKindAccess().getNameBagKeyword_0_1()); }
		'Bag'
		{ after(grammarAccess.getCollectionKindAccess().getNameBagKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getCollectionKindAccess().getNameSequenceKeyword_0_2()); }
		'Sequence'
		{ after(grammarAccess.getCollectionKindAccess().getNameSequenceKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getCollectionKindAccess().getNameCollectionKeyword_0_3()); }
		'Collection'
		{ after(grammarAccess.getCollectionKindAccess().getNameCollectionKeyword_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationOperator__NameAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNavigationOperatorAccess().getNameFullStopKeyword_0_0()); }
		'.'
		{ after(grammarAccess.getNavigationOperatorAccess().getNameFullStopKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getNavigationOperatorAccess().getNameHyphenMinusGreaterThanSignKeyword_0_1()); }
		'->'
		{ after(grammarAccess.getNavigationOperatorAccess().getNameHyphenMinusGreaterThanSignKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__NameAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getNameHyphenMinusKeyword_0_0()); }
		'-'
		{ after(grammarAccess.getUnaryOperatorAccess().getNameHyphenMinusKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getNameNotKeyword_0_1()); }
		'not'
		{ after(grammarAccess.getUnaryOperatorAccess().getNameNotKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyOperator__NameAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplyOperatorAccess().getNameAsteriskKeyword_0_0()); }
		'*'
		{ after(grammarAccess.getMultiplyOperatorAccess().getNameAsteriskKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplyOperatorAccess().getNameSolidusKeyword_0_1()); }
		'/'
		{ after(grammarAccess.getMultiplyOperatorAccess().getNameSolidusKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOperator__NameAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddOperatorAccess().getNamePlusSignKeyword_0_0()); }
		'+'
		{ after(grammarAccess.getAddOperatorAccess().getNamePlusSignKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAddOperatorAccess().getNameHyphenMinusKeyword_0_1()); }
		'-'
		{ after(grammarAccess.getAddOperatorAccess().getNameHyphenMinusKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__NameAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getNameEqualsSignKeyword_0_0()); }
		'='
		{ after(grammarAccess.getRelationalOperatorAccess().getNameEqualsSignKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getNameGreaterThanSignKeyword_0_1()); }
		'>'
		{ after(grammarAccess.getRelationalOperatorAccess().getNameGreaterThanSignKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getNameLessThanSignKeyword_0_2()); }
		'<'
		{ after(grammarAccess.getRelationalOperatorAccess().getNameLessThanSignKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getNameGreaterThanSignEqualsSignKeyword_0_3()); }
		'>='
		{ after(grammarAccess.getRelationalOperatorAccess().getNameGreaterThanSignEqualsSignKeyword_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getNameLessThanSignEqualsSignKeyword_0_4()); }
		'<='
		{ after(grammarAccess.getRelationalOperatorAccess().getNameLessThanSignEqualsSignKeyword_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getNameLessThanSignGreaterThanSignKeyword_0_5()); }
		'<>'
		{ after(grammarAccess.getRelationalOperatorAccess().getNameLessThanSignGreaterThanSignKeyword_0_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperator__NameAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getNameAndKeyword_0_0()); }
		'and'
		{ after(grammarAccess.getLogicalOperatorAccess().getNameAndKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getNameOrKeyword_0_1()); }
		'or'
		{ after(grammarAccess.getLogicalOperatorAccess().getNameOrKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getNameXorKeyword_0_2()); }
		'xor'
		{ after(grammarAccess.getLogicalOperatorAccess().getNameXorKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getNameImpliesKeyword_0_3()); }
		'implies'
		{ after(grammarAccess.getLogicalOperatorAccess().getNameImpliesKeyword_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContextExpression__Group__0__Impl
	rule__ContextExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContextExpressionAccess().getContextKeyword_0()); }
	'context'
	{ after(grammarAccess.getContextExpressionAccess().getContextKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContextExpression__Group__1__Impl
	rule__ContextExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContextExpressionAccess().getTYPENAME_TERMINALTerminalRuleCall_1()); }
	RULE_TYPENAME_TERMINAL
	{ after(grammarAccess.getContextExpressionAccess().getTYPENAME_TERMINALTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContextExpression__Group__2__Impl
	rule__ContextExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContextExpressionAccess().getAlternatives_2()); }
	(rule__ContextExpression__Alternatives_2)
	{ after(grammarAccess.getContextExpressionAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContextExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContextExpressionAccess().getExpressionParserRuleCall_3()); }
	ruleExpression
	{ after(grammarAccess.getContextExpressionAccess().getExpressionParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalExpression__Group__0__Impl
	rule__LogicalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalExpressionAccess().getExpAssignment_0()); }
	(rule__LogicalExpression__ExpAssignment_0)
	{ after(grammarAccess.getLogicalExpressionAccess().getExpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalExpressionAccess().getGroup_1()); }
	(rule__LogicalExpression__Group_1__0)*
	{ after(grammarAccess.getLogicalExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalExpression__Group_1__0__Impl
	rule__LogicalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalExpressionAccess().getOpAssignment_1_0()); }
	(rule__LogicalExpression__OpAssignment_1_0)
	{ after(grammarAccess.getLogicalExpressionAccess().getOpAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalExpressionAccess().getExpAssignment_1_1()); }
	(rule__LogicalExpression__ExpAssignment_1_1)
	{ after(grammarAccess.getLogicalExpressionAccess().getExpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getExpAssignment_0()); }
	(rule__RelationalExpression__ExpAssignment_0)
	{ after(grammarAccess.getRelationalExpressionAccess().getExpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
	(rule__RelationalExpression__Group_1__0)?
	{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group_1__0__Impl
	rule__RelationalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0()); }
	(rule__RelationalExpression__OpAssignment_1_0)
	{ after(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getExpAssignment_1_1()); }
	(rule__RelationalExpression__ExpAssignment_1_1)
	{ after(grammarAccess.getRelationalExpressionAccess().getExpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getExpAssignment_0()); }
	(rule__AdditiveExpression__ExpAssignment_0)
	{ after(grammarAccess.getAdditiveExpressionAccess().getExpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
	(rule__AdditiveExpression__Group_1__0)*
	{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group_1__0__Impl
	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_0()); }
	(rule__AdditiveExpression__OpAssignment_1_0)
	{ after(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getExpAssignment_1_1()); }
	(rule__AdditiveExpression__ExpAssignment_1_1)
	{ after(grammarAccess.getAdditiveExpressionAccess().getExpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getExpAssignment_0()); }
	(rule__MultiplicativeExpression__ExpAssignment_0)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getExpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
	(rule__MultiplicativeExpression__Group_1__0)*
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__0__Impl
	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_0()); }
	(rule__MultiplicativeExpression__OpAssignment_1_0)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getExpAssignment_1_1()); }
	(rule__MultiplicativeExpression__ExpAssignment_1_1)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getExpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group__0__Impl
	rule__UnaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0()); }
	(rule__UnaryExpression__OpAssignment_0)*
	{ after(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getExpAssignment_1()); }
	(rule__UnaryExpression__ExpAssignment_1)
	{ after(grammarAccess.getUnaryExpressionAccess().getExpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PostfixExpression__Group__0__Impl
	rule__PostfixExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPostfixExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
	{ after(grammarAccess.getPostfixExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PostfixExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPostfixExpressionAccess().getGroup_1()); }
	(rule__PostfixExpression__Group_1__0)*
	{ after(grammarAccess.getPostfixExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PostfixExpression__Group_1__0__Impl
	rule__PostfixExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPostfixExpressionAccess().getOpAssignment_1_0()); }
	(rule__PostfixExpression__OpAssignment_1_0)
	{ after(grammarAccess.getPostfixExpressionAccess().getOpAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PostfixExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPostfixExpressionAccess().getFeaturesAssignment_1_1()); }
	(rule__PostfixExpression__FeaturesAssignment_1_1)
	{ after(grammarAccess.getPostfixExpressionAccess().getFeaturesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_3__0__Impl
	rule__PrimaryExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_3_0()); }
	'('
	{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_3__1__Impl
	rule__PrimaryExpression__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_3_1()); }
	ruleExpression
	{ after(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_3_2()); }
	')'
	{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__0__Impl
	rule__IfExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfExpressionAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__1__Impl
	rule__IfExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getExpAssignment_1()); }
	(rule__IfExpression__ExpAssignment_1)
	{ after(grammarAccess.getIfExpressionAccess().getExpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__2__Impl
	rule__IfExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getThenKeyword_2()); }
	'then'
	{ after(grammarAccess.getIfExpressionAccess().getThenKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__3__Impl
	rule__IfExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getExpAssignment_3()); }
	(rule__IfExpression__ExpAssignment_3)
	{ after(grammarAccess.getIfExpressionAccess().getExpAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__4__Impl
	rule__IfExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getGroup_4()); }
	(rule__IfExpression__Group_4__0)?
	{ after(grammarAccess.getIfExpressionAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getEndifKeyword_5()); }
	'endif'
	{ after(grammarAccess.getIfExpressionAccess().getEndifKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group_4__0__Impl
	rule__IfExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getElseKeyword_4_0()); }
	'else'
	{ after(grammarAccess.getIfExpressionAccess().getElseKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getExpAssignment_4_1()); }
	(rule__IfExpression__ExpAssignment_4_1)
	{ after(grammarAccess.getIfExpressionAccess().getExpAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCallParameters__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCallParameters__Group__0__Impl
	rule__FeatureCallParameters__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCallParameters__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallParametersAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getFeatureCallParametersAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCallParameters__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCallParameters__Group__1__Impl
	rule__FeatureCallParameters__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCallParameters__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallParametersAccess().getDecsAssignment_1()); }
	(rule__FeatureCallParameters__DecsAssignment_1)?
	{ after(grammarAccess.getFeatureCallParametersAccess().getDecsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCallParameters__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCallParameters__Group__2__Impl
	rule__FeatureCallParameters__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCallParameters__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallParametersAccess().getParamsAssignment_2()); }
	(rule__FeatureCallParameters__ParamsAssignment_2)
	{ after(grammarAccess.getFeatureCallParametersAccess().getParamsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCallParameters__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCallParameters__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCallParameters__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallParametersAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getFeatureCallParametersAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_2__0__Impl
	rule__Literal__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getNumberSignKeyword_2_0()); }
	'#'
	{ after(grammarAccess.getLiteralAccess().getNumberSignKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getNameAssignment_2_1()); }
	(rule__Literal__NameAssignment_2_1)
	{ after(grammarAccess.getLiteralAccess().getNameAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumerationType__Group__0__Impl
	rule__EnumerationType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationTypeAccess().getEnumKeyword_0()); }
	'enum'
	{ after(grammarAccess.getEnumerationTypeAccess().getEnumKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumerationType__Group__1__Impl
	rule__EnumerationType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationTypeAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getEnumerationTypeAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumerationType__Group__2__Impl
	rule__EnumerationType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationTypeAccess().getGroup_2()); }
	(rule__EnumerationType__Group_2__0)
	{ after(grammarAccess.getEnumerationTypeAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationType__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumerationType__Group__3__Impl
	rule__EnumerationType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationType__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationTypeAccess().getGroup_3()); }
	(rule__EnumerationType__Group_3__0)*
	{ after(grammarAccess.getEnumerationTypeAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationType__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumerationType__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationType__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationTypeAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getEnumerationTypeAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationType__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumerationType__Group_2__0__Impl
	rule__EnumerationType__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationType__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationTypeAccess().getNumberSignKeyword_2_0()); }
	'#'
	{ after(grammarAccess.getEnumerationTypeAccess().getNumberSignKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationType__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumerationType__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationType__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationTypeAccess().getLeftAssignment_2_1()); }
	(rule__EnumerationType__LeftAssignment_2_1)
	{ after(grammarAccess.getEnumerationTypeAccess().getLeftAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationType__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumerationType__Group_3__0__Impl
	rule__EnumerationType__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationType__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationTypeAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getEnumerationTypeAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationType__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumerationType__Group_3__1__Impl
	rule__EnumerationType__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationType__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationTypeAccess().getNumberSignKeyword_3_1()); }
	'#'
	{ after(grammarAccess.getEnumerationTypeAccess().getNumberSignKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationType__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumerationType__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationType__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationTypeAccess().getRightsAssignment_3_2()); }
	(rule__EnumerationType__RightsAssignment_3_2)
	{ after(grammarAccess.getEnumerationTypeAccess().getRightsAssignment_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralCollection__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralCollection__Group__0__Impl
	rule__LiteralCollection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralCollection__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralCollectionAccess().getLiteralCollectionAction_0()); }
	()
	{ after(grammarAccess.getLiteralCollectionAccess().getLiteralCollectionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralCollection__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralCollection__Group__1__Impl
	rule__LiteralCollection__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralCollection__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralCollectionAccess().getNameAssignment_1()); }
	(rule__LiteralCollection__NameAssignment_1)
	{ after(grammarAccess.getLiteralCollectionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralCollection__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralCollection__Group__2__Impl
	rule__LiteralCollection__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralCollection__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralCollectionAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getLiteralCollectionAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralCollection__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralCollection__Group__3__Impl
	rule__LiteralCollection__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralCollection__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralCollectionAccess().getExpAssignment_3()); }
	(rule__LiteralCollection__ExpAssignment_3)?
	{ after(grammarAccess.getLiteralCollectionAccess().getExpAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralCollection__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralCollection__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralCollection__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralCollectionAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getLiteralCollectionAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionListOrRange__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionListOrRange__Group__0__Impl
	rule__ExpressionListOrRange__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionListOrRange__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionListOrRangeAccess().getExpAssignment_0()); }
	(rule__ExpressionListOrRange__ExpAssignment_0)
	{ after(grammarAccess.getExpressionListOrRangeAccess().getExpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionListOrRange__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionListOrRange__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionListOrRange__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionListOrRangeAccess().getAlternatives_1()); }
	(rule__ExpressionListOrRange__Alternatives_1)?
	{ after(grammarAccess.getExpressionListOrRangeAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionListOrRange__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionListOrRange__Group_1_0__0__Impl
	rule__ExpressionListOrRange__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionListOrRange__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionListOrRangeAccess().getCommaKeyword_1_0_0()); }
	','
	{ after(grammarAccess.getExpressionListOrRangeAccess().getCommaKeyword_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionListOrRange__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionListOrRange__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionListOrRange__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionListOrRangeAccess().getExpAssignment_1_0_1()); }
	(rule__ExpressionListOrRange__ExpAssignment_1_0_1)
	{ after(grammarAccess.getExpressionListOrRangeAccess().getExpAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionListOrRange__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionListOrRange__Group_1_1__0__Impl
	rule__ExpressionListOrRange__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionListOrRange__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionListOrRangeAccess().getFullStopFullStopKeyword_1_1_0()); }
	'..'
	{ after(grammarAccess.getExpressionListOrRangeAccess().getFullStopFullStopKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionListOrRange__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionListOrRange__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionListOrRange__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionListOrRangeAccess().getExpAssignment_1_1_1()); }
	(rule__ExpressionListOrRange__ExpAssignment_1_1_1)
	{ after(grammarAccess.getExpressionListOrRangeAccess().getExpAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group__0__Impl
	rule__FeatureCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getPathNameParserRuleCall_0()); }
	rulePathName
	{ after(grammarAccess.getFeatureCallAccess().getPathNameParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group__1__Impl
	rule__FeatureCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getParamsAssignment_1()); }
	(rule__FeatureCall__ParamsAssignment_1)?
	{ after(grammarAccess.getFeatureCallAccess().getParamsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group__2__Impl
	rule__FeatureCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getParamsAssignment_2()); }
	(rule__FeatureCall__ParamsAssignment_2)?
	{ after(grammarAccess.getFeatureCallAccess().getParamsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getParamsAssignment_3()); }
	(rule__FeatureCall__ParamsAssignment_3)?
	{ after(grammarAccess.getFeatureCallAccess().getParamsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Qualifiers__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Qualifiers__Group__0__Impl
	rule__Qualifiers__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Qualifiers__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiersAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getQualifiersAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Qualifiers__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Qualifiers__Group__1__Impl
	rule__Qualifiers__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Qualifiers__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiersAccess().getActualParameterListParserRuleCall_1()); }
	ruleActualParameterList
	{ after(grammarAccess.getQualifiersAccess().getActualParameterListParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Qualifiers__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Qualifiers__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Qualifiers__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiersAccess().getRightSquareBracketKeyword_2()); }
	']'
	{ after(grammarAccess.getQualifiersAccess().getRightSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Declarator__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declarator__Group__0__Impl
	rule__Declarator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaratorAccess().getNameAssignment_0()); }
	(rule__Declarator__NameAssignment_0)
	{ after(grammarAccess.getDeclaratorAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declarator__Group__1__Impl
	rule__Declarator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaratorAccess().getGroup_1()); }
	(rule__Declarator__Group_1__0)*
	{ after(grammarAccess.getDeclaratorAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declarator__Group__2__Impl
	rule__Declarator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaratorAccess().getGroup_2()); }
	(rule__Declarator__Group_2__0)?
	{ after(grammarAccess.getDeclaratorAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declarator__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaratorAccess().getVerticalLineKeyword_3()); }
	'|'
	{ after(grammarAccess.getDeclaratorAccess().getVerticalLineKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Declarator__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declarator__Group_1__0__Impl
	rule__Declarator__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaratorAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getDeclaratorAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declarator__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaratorAccess().getNameAssignment_1_1()); }
	(rule__Declarator__NameAssignment_1_1)
	{ after(grammarAccess.getDeclaratorAccess().getNameAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Declarator__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declarator__Group_2__0__Impl
	rule__Declarator__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaratorAccess().getCOLONTerminalRuleCall_2_0()); }
	RULE_COLON
	{ after(grammarAccess.getDeclaratorAccess().getCOLONTerminalRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declarator__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaratorAccess().getTypeAssignment_2_1()); }
	(rule__Declarator__TypeAssignment_2_1)
	{ after(grammarAccess.getDeclaratorAccess().getTypeAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PathTypeName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PathTypeName__Group__0__Impl
	rule__PathTypeName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PathTypeName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathTypeNameAccess().getLeftAssignment_0()); }
	(rule__PathTypeName__LeftAssignment_0)
	{ after(grammarAccess.getPathTypeNameAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathTypeName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PathTypeName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PathTypeName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathTypeNameAccess().getGroup_1()); }
	(rule__PathTypeName__Group_1__0)*
	{ after(grammarAccess.getPathTypeNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PathTypeName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PathTypeName__Group_1__0__Impl
	rule__PathTypeName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PathTypeName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathTypeNameAccess().getDOUBLE_COLONTerminalRuleCall_1_0()); }
	RULE_DOUBLE_COLON
	{ after(grammarAccess.getPathTypeNameAccess().getDOUBLE_COLONTerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathTypeName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PathTypeName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PathTypeName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathTypeNameAccess().getRightsAssignment_1_1()); }
	(rule__PathTypeName__RightsAssignment_1_1)
	{ after(grammarAccess.getPathTypeNameAccess().getRightsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PathName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PathName__Group__0__Impl
	rule__PathName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PathName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathNameAccess().getLeftAssignment_0()); }
	(rule__PathName__LeftAssignment_0)
	{ after(grammarAccess.getPathNameAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PathName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PathName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathNameAccess().getGroup_1()); }
	(rule__PathName__Group_1__0)*
	{ after(grammarAccess.getPathNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PathName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PathName__Group_1__0__Impl
	rule__PathName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PathName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathNameAccess().getDOUBLE_COLONTerminalRuleCall_1_0()); }
	RULE_DOUBLE_COLON
	{ after(grammarAccess.getPathNameAccess().getDOUBLE_COLONTerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PathName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PathName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPathNameAccess().getRightsAssignment_1_1()); }
	(rule__PathName__RightsAssignment_1_1)
	{ after(grammarAccess.getPathNameAccess().getRightsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TimeExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeExpression__Group__0__Impl
	rule__TimeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeExpressionAccess().getCommercialAtKeyword_0()); }
	'@'
	{ after(grammarAccess.getTimeExpressionAccess().getCommercialAtKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeExpressionAccess().getNameAssignment_1()); }
	(rule__TimeExpression__NameAssignment_1)
	{ after(grammarAccess.getTimeExpressionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActualParameterList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActualParameterList__Group__0__Impl
	rule__ActualParameterList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActualParameterList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActualParameterListAccess().getExpAssignment_0()); }
	(rule__ActualParameterList__ExpAssignment_0)
	{ after(grammarAccess.getActualParameterListAccess().getExpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActualParameterList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActualParameterList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActualParameterList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActualParameterListAccess().getGroup_1()); }
	(rule__ActualParameterList__Group_1__0)*
	{ after(grammarAccess.getActualParameterListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActualParameterList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActualParameterList__Group_1__0__Impl
	rule__ActualParameterList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActualParameterList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActualParameterListAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getActualParameterListAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActualParameterList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActualParameterList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActualParameterList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActualParameterListAccess().getExpAssignment_1_1()); }
	(rule__ActualParameterList__ExpAssignment_1_1)
	{ after(grammarAccess.getActualParameterListAccess().getExpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NoParamFunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NoParamFunction__Group__0__Impl
	rule__NoParamFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NoParamFunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNoParamFunctionAccess().getNameAssignment_0()); }
	(rule__NoParamFunction__NameAssignment_0)
	{ after(grammarAccess.getNoParamFunctionAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NoParamFunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NoParamFunction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NoParamFunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNoParamFunctionAccess().getLeftParenthesisRightParenthesisKeyword_1()); }
	'()'
	{ after(grammarAccess.getNoParamFunctionAccess().getLeftParenthesisRightParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OneTypeParamFunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OneTypeParamFunction__Group__0__Impl
	rule__OneTypeParamFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OneTypeParamFunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOneTypeParamFunctionAccess().getNameAssignment_0()); }
	(rule__OneTypeParamFunction__NameAssignment_0)
	{ after(grammarAccess.getOneTypeParamFunctionAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OneTypeParamFunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OneTypeParamFunction__Group__1__Impl
	rule__OneTypeParamFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OneTypeParamFunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOneTypeParamFunctionAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getOneTypeParamFunctionAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OneTypeParamFunction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OneTypeParamFunction__Group__2__Impl
	rule__OneTypeParamFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OneTypeParamFunction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOneTypeParamFunctionAccess().getTYPENAME_TERMINALTerminalRuleCall_2()); }
	RULE_TYPENAME_TERMINAL
	{ after(grammarAccess.getOneTypeParamFunctionAccess().getTYPENAME_TERMINALTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OneTypeParamFunction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OneTypeParamFunction__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OneTypeParamFunction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOneTypeParamFunctionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getOneTypeParamFunctionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OneStringParamFunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OneStringParamFunction__Group__0__Impl
	rule__OneStringParamFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OneStringParamFunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOneStringParamFunctionAccess().getNameAssignment_0()); }
	(rule__OneStringParamFunction__NameAssignment_0)
	{ after(grammarAccess.getOneStringParamFunctionAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OneStringParamFunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OneStringParamFunction__Group__1__Impl
	rule__OneStringParamFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OneStringParamFunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOneStringParamFunctionAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getOneStringParamFunctionAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OneStringParamFunction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OneStringParamFunction__Group__2__Impl
	rule__OneStringParamFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OneStringParamFunction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOneStringParamFunctionAccess().getSTRINGTerminalRuleCall_2()); }
	RULE_STRING
	{ after(grammarAccess.getOneStringParamFunctionAccess().getSTRINGTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OneStringParamFunction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OneStringParamFunction__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OneStringParamFunction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOneStringParamFunctionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getOneStringParamFunctionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TwoStringParamFunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TwoStringParamFunction__Group__0__Impl
	rule__TwoStringParamFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoStringParamFunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTwoStringParamFunctionAccess().getNameAssignment_0()); }
	(rule__TwoStringParamFunction__NameAssignment_0)
	{ after(grammarAccess.getTwoStringParamFunctionAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoStringParamFunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TwoStringParamFunction__Group__1__Impl
	rule__TwoStringParamFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoStringParamFunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTwoStringParamFunctionAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getTwoStringParamFunctionAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoStringParamFunction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TwoStringParamFunction__Group__2__Impl
	rule__TwoStringParamFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoStringParamFunction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTwoStringParamFunctionAccess().getSTRINGTerminalRuleCall_2()); }
	RULE_STRING
	{ after(grammarAccess.getTwoStringParamFunctionAccess().getSTRINGTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoStringParamFunction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TwoStringParamFunction__Group__3__Impl
	rule__TwoStringParamFunction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoStringParamFunction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTwoStringParamFunctionAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getTwoStringParamFunctionAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoStringParamFunction__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TwoStringParamFunction__Group__4__Impl
	rule__TwoStringParamFunction__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoStringParamFunction__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTwoStringParamFunctionAccess().getSTRINGTerminalRuleCall_4()); }
	RULE_STRING
	{ after(grammarAccess.getTwoStringParamFunctionAccess().getSTRINGTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoStringParamFunction__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TwoStringParamFunction__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoStringParamFunction__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTwoStringParamFunctionAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getTwoStringParamFunctionAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OneIntegerParamFunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OneIntegerParamFunction__Group__0__Impl
	rule__OneIntegerParamFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OneIntegerParamFunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOneIntegerParamFunctionAccess().getNameAssignment_0()); }
	(rule__OneIntegerParamFunction__NameAssignment_0)
	{ after(grammarAccess.getOneIntegerParamFunctionAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OneIntegerParamFunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OneIntegerParamFunction__Group__1__Impl
	rule__OneIntegerParamFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OneIntegerParamFunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOneIntegerParamFunctionAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getOneIntegerParamFunctionAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OneIntegerParamFunction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OneIntegerParamFunction__Group__2__Impl
	rule__OneIntegerParamFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OneIntegerParamFunction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOneIntegerParamFunctionAccess().getNUMBERTerminalRuleCall_2()); }
	RULE_NUMBER
	{ after(grammarAccess.getOneIntegerParamFunctionAccess().getNUMBERTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OneIntegerParamFunction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OneIntegerParamFunction__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OneIntegerParamFunction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOneIntegerParamFunctionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getOneIntegerParamFunctionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TwoIntegerParamFunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TwoIntegerParamFunction__Group__0__Impl
	rule__TwoIntegerParamFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoIntegerParamFunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTwoIntegerParamFunctionAccess().getNameAssignment_0()); }
	(rule__TwoIntegerParamFunction__NameAssignment_0)
	{ after(grammarAccess.getTwoIntegerParamFunctionAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoIntegerParamFunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TwoIntegerParamFunction__Group__1__Impl
	rule__TwoIntegerParamFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoIntegerParamFunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTwoIntegerParamFunctionAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getTwoIntegerParamFunctionAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoIntegerParamFunction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TwoIntegerParamFunction__Group__2__Impl
	rule__TwoIntegerParamFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoIntegerParamFunction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTwoIntegerParamFunctionAccess().getNUMBERTerminalRuleCall_2()); }
	RULE_NUMBER
	{ after(grammarAccess.getTwoIntegerParamFunctionAccess().getNUMBERTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoIntegerParamFunction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TwoIntegerParamFunction__Group__3__Impl
	rule__TwoIntegerParamFunction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoIntegerParamFunction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTwoIntegerParamFunctionAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getTwoIntegerParamFunctionAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoIntegerParamFunction__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TwoIntegerParamFunction__Group__4__Impl
	rule__TwoIntegerParamFunction__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoIntegerParamFunction__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTwoIntegerParamFunctionAccess().getNUMBERTerminalRuleCall_4()); }
	RULE_NUMBER
	{ after(grammarAccess.getTwoIntegerParamFunctionAccess().getNUMBERTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoIntegerParamFunction__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TwoIntegerParamFunction__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoIntegerParamFunction__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTwoIntegerParamFunctionAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getTwoIntegerParamFunctionAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalExpression__ExpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalExpressionAccess().getExpRelationalExpressionParserRuleCall_0_0()); }
		ruleRelationalExpression
		{ after(grammarAccess.getLogicalExpressionAccess().getExpRelationalExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__OpAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalExpressionAccess().getOpLogicalOperatorParserRuleCall_1_0_0()); }
		ruleLogicalOperator
		{ after(grammarAccess.getLogicalExpressionAccess().getOpLogicalOperatorParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalExpression__ExpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalExpressionAccess().getExpRelationalExpressionParserRuleCall_1_1_0()); }
		ruleRelationalExpression
		{ after(grammarAccess.getLogicalExpressionAccess().getExpRelationalExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__ExpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalExpressionAccess().getExpAdditiveExpressionParserRuleCall_0_0()); }
		ruleAdditiveExpression
		{ after(grammarAccess.getRelationalExpressionAccess().getExpAdditiveExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OpAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_0()); }
		ruleRelationalOperator
		{ after(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__ExpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalExpressionAccess().getExpAdditiveExpressionParserRuleCall_1_1_0()); }
		ruleAdditiveExpression
		{ after(grammarAccess.getRelationalExpressionAccess().getExpAdditiveExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__ExpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getExpMultiplicativeExpressionParserRuleCall_0_0()); }
		ruleMultiplicativeExpression
		{ after(grammarAccess.getAdditiveExpressionAccess().getExpMultiplicativeExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OpAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getOpAddOperatorParserRuleCall_1_0_0()); }
		ruleAddOperator
		{ after(grammarAccess.getAdditiveExpressionAccess().getOpAddOperatorParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__ExpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getExpMultiplicativeExpressionParserRuleCall_1_1_0()); }
		ruleMultiplicativeExpression
		{ after(grammarAccess.getAdditiveExpressionAccess().getExpMultiplicativeExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__ExpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getExpUnaryExpressionParserRuleCall_0_0()); }
		ruleUnaryExpression
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getExpUnaryExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpMultiplyOperatorParserRuleCall_1_0_0()); }
		ruleMultiplyOperator
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpMultiplyOperatorParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__ExpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getExpUnaryExpressionParserRuleCall_1_1_0()); }
		ruleUnaryExpression
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getExpUnaryExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_0_0()); }
		ruleUnaryOperator
		{ after(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__ExpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getExpPostfixExpressionParserRuleCall_1_0()); }
		rulePostfixExpression
		{ after(grammarAccess.getUnaryExpressionAccess().getExpPostfixExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__OpAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPostfixExpressionAccess().getOpNavigationOperatorParserRuleCall_1_0_0()); }
		ruleNavigationOperator
		{ after(grammarAccess.getPostfixExpressionAccess().getOpNavigationOperatorParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixExpression__FeaturesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPostfixExpressionAccess().getFeaturesFeatureCallParserRuleCall_1_1_0()); }
		ruleFeatureCall
		{ after(grammarAccess.getPostfixExpressionAccess().getFeaturesFeatureCallParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__ExpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfExpressionAccess().getExpExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getIfExpressionAccess().getExpExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__ExpAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfExpressionAccess().getExpExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getIfExpressionAccess().getExpExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__ExpAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfExpressionAccess().getExpExpressionParserRuleCall_4_1_0()); }
		ruleExpression
		{ after(grammarAccess.getIfExpressionAccess().getExpExpressionParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCallParameters__DecsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureCallParametersAccess().getDecsDeclaratorParserRuleCall_1_0()); }
		ruleDeclarator
		{ after(grammarAccess.getFeatureCallParametersAccess().getDecsDeclaratorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCallParameters__ParamsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureCallParametersAccess().getParamsActualParameterListParserRuleCall_2_0()); }
		ruleActualParameterList
		{ after(grammarAccess.getFeatureCallParametersAccess().getParamsActualParameterListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getNameSTRINGTerminalRuleCall_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getLiteralAccess().getNameSTRINGTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getNameNUMBERTerminalRuleCall_1_0()); }
		RULE_NUMBER
		{ after(grammarAccess.getLiteralAccess().getNameNUMBERTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__NameAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getNameNAME_TERMINALTerminalRuleCall_2_1_0()); }
		RULE_NAME_TERMINAL
		{ after(grammarAccess.getLiteralAccess().getNameNAME_TERMINALTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationType__LeftAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerationTypeAccess().getLeftNameParserRuleCall_2_1_0()); }
		ruleName
		{ after(grammarAccess.getEnumerationTypeAccess().getLeftNameParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationType__RightsAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerationTypeAccess().getRightsNameParserRuleCall_3_2_0()); }
		ruleName
		{ after(grammarAccess.getEnumerationTypeAccess().getRightsNameParserRuleCall_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralCollection__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralCollectionAccess().getNameCollectionKindParserRuleCall_1_0()); }
		ruleCollectionKind
		{ after(grammarAccess.getLiteralCollectionAccess().getNameCollectionKindParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralCollection__ExpAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralCollectionAccess().getExpExpressionListOrRangeParserRuleCall_3_0()); }
		ruleExpressionListOrRange
		{ after(grammarAccess.getLiteralCollectionAccess().getExpExpressionListOrRangeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionListOrRange__ExpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionListOrRangeAccess().getExpExpressionParserRuleCall_0_0()); }
		ruleExpression
		{ after(grammarAccess.getExpressionListOrRangeAccess().getExpExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionListOrRange__ExpAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionListOrRangeAccess().getExpExpressionParserRuleCall_1_0_1_0()); }
		ruleExpression
		{ after(grammarAccess.getExpressionListOrRangeAccess().getExpExpressionParserRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionListOrRange__ExpAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionListOrRangeAccess().getExpExpressionParserRuleCall_1_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getExpressionListOrRangeAccess().getExpExpressionParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__ParamsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureCallAccess().getParamsTimeExpressionParserRuleCall_1_0()); }
		ruleTimeExpression
		{ after(grammarAccess.getFeatureCallAccess().getParamsTimeExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__ParamsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureCallAccess().getParamsQualifiersParserRuleCall_2_0()); }
		ruleQualifiers
		{ after(grammarAccess.getFeatureCallAccess().getParamsQualifiersParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__ParamsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureCallAccess().getParamsFeatureCallParametersParserRuleCall_3_0()); }
		ruleFeatureCallParameters
		{ after(grammarAccess.getFeatureCallAccess().getParamsFeatureCallParametersParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclaratorAccess().getNameNameParserRuleCall_0_0()); }
		ruleName
		{ after(grammarAccess.getDeclaratorAccess().getNameNameParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__NameAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclaratorAccess().getNameNameParserRuleCall_1_1_0()); }
		ruleName
		{ after(grammarAccess.getDeclaratorAccess().getNameNameParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declarator__TypeAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclaratorAccess().getTypeSimpleTypeSpecifierParserRuleCall_2_1_0()); }
		ruleSimpleTypeSpecifier
		{ after(grammarAccess.getDeclaratorAccess().getTypeSimpleTypeSpecifierParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathTypeName__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPathTypeNameAccess().getLeftTypeNameParserRuleCall_0_0()); }
		ruleTypeName
		{ after(grammarAccess.getPathTypeNameAccess().getLeftTypeNameParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathTypeName__RightsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPathTypeNameAccess().getRightsTypeNameParserRuleCall_1_1_0()); }
		ruleTypeName
		{ after(grammarAccess.getPathTypeNameAccess().getRightsTypeNameParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathName__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPathNameAccess().getLeftAlternatives_0_0()); }
		(rule__PathName__LeftAlternatives_0_0)
		{ after(grammarAccess.getPathNameAccess().getLeftAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PathName__RightsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPathNameAccess().getRightsAlternatives_1_1_0()); }
		(rule__PathName__RightsAlternatives_1_1_0)
		{ after(grammarAccess.getPathNameAccess().getRightsAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeExpression__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeExpressionAccess().getNameNAME_TERMINALTerminalRuleCall_1_0()); }
		RULE_NAME_TERMINAL
		{ after(grammarAccess.getTimeExpressionAccess().getNameNAME_TERMINALTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActualParameterList__ExpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActualParameterListAccess().getExpExpressionParserRuleCall_0_0()); }
		ruleExpression
		{ after(grammarAccess.getActualParameterListAccess().getExpExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActualParameterList__ExpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActualParameterListAccess().getExpExpressionParserRuleCall_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getActualParameterListAccess().getExpExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeName__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeNameAccess().getNameTYPENAME_TERMINALTerminalRuleCall_0()); }
		RULE_TYPENAME_TERMINAL
		{ after(grammarAccess.getTypeNameAccess().getNameTYPENAME_TERMINALTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getNameNAME_TERMINALTerminalRuleCall_0()); }
		RULE_NAME_TERMINAL
		{ after(grammarAccess.getAttributeAccess().getNameNAME_TERMINALTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NoParamFunction__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNoParamFunctionAccess().getNameAlternatives_0_0()); }
		(rule__NoParamFunction__NameAlternatives_0_0)
		{ after(grammarAccess.getNoParamFunctionAccess().getNameAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OneTypeParamFunction__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOneTypeParamFunctionAccess().getNameAlternatives_0_0()); }
		(rule__OneTypeParamFunction__NameAlternatives_0_0)
		{ after(grammarAccess.getOneTypeParamFunctionAccess().getNameAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OneStringParamFunction__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOneStringParamFunctionAccess().getNameAlternatives_0_0()); }
		(rule__OneStringParamFunction__NameAlternatives_0_0)
		{ after(grammarAccess.getOneStringParamFunctionAccess().getNameAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoStringParamFunction__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTwoStringParamFunctionAccess().getNameAlternatives_0_0()); }
		(rule__TwoStringParamFunction__NameAlternatives_0_0)
		{ after(grammarAccess.getTwoStringParamFunctionAccess().getNameAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OneIntegerParamFunction__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOneIntegerParamFunctionAccess().getNameAtKeyword_0_0()); }
		(
			{ before(grammarAccess.getOneIntegerParamFunctionAccess().getNameAtKeyword_0_0()); }
			'at'
			{ after(grammarAccess.getOneIntegerParamFunctionAccess().getNameAtKeyword_0_0()); }
		)
		{ after(grammarAccess.getOneIntegerParamFunctionAccess().getNameAtKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TwoIntegerParamFunction__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTwoIntegerParamFunctionAccess().getNameAlternatives_0_0()); }
		(rule__TwoIntegerParamFunction__NameAlternatives_0_0)
		{ after(grammarAccess.getTwoIntegerParamFunctionAccess().getNameAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionKind__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionKindAccess().getNameAlternatives_0()); }
		(rule__CollectionKind__NameAlternatives_0)
		{ after(grammarAccess.getCollectionKindAccess().getNameAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NavigationOperator__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNavigationOperatorAccess().getNameAlternatives_0()); }
		(rule__NavigationOperator__NameAlternatives_0)
		{ after(grammarAccess.getNavigationOperatorAccess().getNameAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryOperatorAccess().getNameAlternatives_0()); }
		(rule__UnaryOperator__NameAlternatives_0)
		{ after(grammarAccess.getUnaryOperatorAccess().getNameAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyOperator__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplyOperatorAccess().getNameAlternatives_0()); }
		(rule__MultiplyOperator__NameAlternatives_0)
		{ after(grammarAccess.getMultiplyOperatorAccess().getNameAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddOperator__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddOperatorAccess().getNameAlternatives_0()); }
		(rule__AddOperator__NameAlternatives_0)
		{ after(grammarAccess.getAddOperatorAccess().getNameAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getNameAlternatives_0()); }
		(rule__RelationalOperator__NameAlternatives_0)
		{ after(grammarAccess.getRelationalOperatorAccess().getNameAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperator__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getNameAlternatives_0()); }
		(rule__LogicalOperator__NameAlternatives_0)
		{ after(grammarAccess.getLogicalOperatorAccess().getNameAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

fragment RULE_LOWER : 'a'..'z';

fragment RULE_UPPER : 'A'..'Z';

fragment RULE_LETTER : (RULE_UPPER|RULE_LOWER);

fragment RULE_DIGIT : '0'..'9';

RULE_NUMBER : RULE_DIGIT+;

fragment RULE_IDCHAR : (RULE_LETTER|RULE_DIGIT|'_');

RULE_NAME_TERMINAL : RULE_LOWER RULE_IDCHAR*;

RULE_TYPENAME_TERMINAL : RULE_UPPER RULE_IDCHAR*;

RULE_DOUBLE_COLON : RULE_COLON RULE_COLON;

RULE_COLON : ':';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
