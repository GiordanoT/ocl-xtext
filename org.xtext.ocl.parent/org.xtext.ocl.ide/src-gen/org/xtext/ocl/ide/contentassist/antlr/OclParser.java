/*
 * generated by Xtext 2.26.0-SNAPSHOT
 */
package org.xtext.ocl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ocl.ide.contentassist.antlr.internal.InternalOclParser;
import org.xtext.ocl.services.OclGrammarAccess;

public class OclParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(OclGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, OclGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStartAccess().getAlternatives(), "rule__Start__Alternatives");
			builder.put(grammarAccess.getContextExpressionAccess().getAlternatives_2(), "rule__ContextExpression__Alternatives_2");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
			builder.put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
			builder.put(grammarAccess.getSimpleTypeSpecifierAccess().getAlternatives(), "rule__SimpleTypeSpecifier__Alternatives");
			builder.put(grammarAccess.getExpressionListOrRangeAccess().getAlternatives_1(), "rule__ExpressionListOrRange__Alternatives_1");
			builder.put(grammarAccess.getPathNameAccess().getLeftAlternatives_0_0(), "rule__PathName__LeftAlternatives_0_0");
			builder.put(grammarAccess.getPathNameAccess().getRightsAlternatives_1_1_0(), "rule__PathName__RightsAlternatives_1_1_0");
			builder.put(grammarAccess.getNameAccess().getAlternatives(), "rule__Name__Alternatives");
			builder.put(grammarAccess.getFunctionAccess().getAlternatives(), "rule__Function__Alternatives");
			builder.put(grammarAccess.getNoParamFunctionAccess().getNameAlternatives_0_0(), "rule__NoParamFunction__NameAlternatives_0_0");
			builder.put(grammarAccess.getOneTypeParamFunctionAccess().getNameAlternatives_0_0(), "rule__OneTypeParamFunction__NameAlternatives_0_0");
			builder.put(grammarAccess.getOneStringParamFunctionAccess().getNameAlternatives_0_0(), "rule__OneStringParamFunction__NameAlternatives_0_0");
			builder.put(grammarAccess.getTwoStringParamFunctionAccess().getNameAlternatives_0_0(), "rule__TwoStringParamFunction__NameAlternatives_0_0");
			builder.put(grammarAccess.getTwoIntegerParamFunctionAccess().getNameAlternatives_0_0(), "rule__TwoIntegerParamFunction__NameAlternatives_0_0");
			builder.put(grammarAccess.getCollectionKindAccess().getNameAlternatives_0(), "rule__CollectionKind__NameAlternatives_0");
			builder.put(grammarAccess.getNavigationOperatorAccess().getNameAlternatives_0(), "rule__NavigationOperator__NameAlternatives_0");
			builder.put(grammarAccess.getUnaryOperatorAccess().getNameAlternatives_0(), "rule__UnaryOperator__NameAlternatives_0");
			builder.put(grammarAccess.getMultiplyOperatorAccess().getNameAlternatives_0(), "rule__MultiplyOperator__NameAlternatives_0");
			builder.put(grammarAccess.getAddOperatorAccess().getNameAlternatives_0(), "rule__AddOperator__NameAlternatives_0");
			builder.put(grammarAccess.getRelationalOperatorAccess().getNameAlternatives_0(), "rule__RelationalOperator__NameAlternatives_0");
			builder.put(grammarAccess.getLogicalOperatorAccess().getNameAlternatives_0(), "rule__LogicalOperator__NameAlternatives_0");
			builder.put(grammarAccess.getContextExpressionAccess().getGroup(), "rule__ContextExpression__Group__0");
			builder.put(grammarAccess.getLogicalExpressionAccess().getGroup(), "rule__LogicalExpression__Group__0");
			builder.put(grammarAccess.getLogicalExpressionAccess().getGroup_1(), "rule__LogicalExpression__Group_1__0");
			builder.put(grammarAccess.getRelationalExpressionAccess().getGroup(), "rule__RelationalExpression__Group__0");
			builder.put(grammarAccess.getRelationalExpressionAccess().getGroup_1(), "rule__RelationalExpression__Group_1__0");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getGroup(), "rule__AdditiveExpression__Group__0");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getGroup_1(), "rule__AdditiveExpression__Group_1__0");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getGroup(), "rule__MultiplicativeExpression__Group__0");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1(), "rule__MultiplicativeExpression__Group_1__0");
			builder.put(grammarAccess.getUnaryExpressionAccess().getGroup(), "rule__UnaryExpression__Group__0");
			builder.put(grammarAccess.getPostfixExpressionAccess().getGroup(), "rule__PostfixExpression__Group__0");
			builder.put(grammarAccess.getPostfixExpressionAccess().getGroup_1(), "rule__PostfixExpression__Group_1__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_3(), "rule__PrimaryExpression__Group_3__0");
			builder.put(grammarAccess.getIfExpressionAccess().getGroup(), "rule__IfExpression__Group__0");
			builder.put(grammarAccess.getIfExpressionAccess().getGroup_4(), "rule__IfExpression__Group_4__0");
			builder.put(grammarAccess.getFeatureCallParametersAccess().getGroup(), "rule__FeatureCallParameters__Group__0");
			builder.put(grammarAccess.getLiteralAccess().getGroup_2(), "rule__Literal__Group_2__0");
			builder.put(grammarAccess.getEnumerationTypeAccess().getGroup(), "rule__EnumerationType__Group__0");
			builder.put(grammarAccess.getEnumerationTypeAccess().getGroup_2(), "rule__EnumerationType__Group_2__0");
			builder.put(grammarAccess.getEnumerationTypeAccess().getGroup_3(), "rule__EnumerationType__Group_3__0");
			builder.put(grammarAccess.getLiteralCollectionAccess().getGroup(), "rule__LiteralCollection__Group__0");
			builder.put(grammarAccess.getExpressionListOrRangeAccess().getGroup(), "rule__ExpressionListOrRange__Group__0");
			builder.put(grammarAccess.getExpressionListOrRangeAccess().getGroup_1_0(), "rule__ExpressionListOrRange__Group_1_0__0");
			builder.put(grammarAccess.getExpressionListOrRangeAccess().getGroup_1_1(), "rule__ExpressionListOrRange__Group_1_1__0");
			builder.put(grammarAccess.getFeatureCallAccess().getGroup(), "rule__FeatureCall__Group__0");
			builder.put(grammarAccess.getQualifiersAccess().getGroup(), "rule__Qualifiers__Group__0");
			builder.put(grammarAccess.getDeclaratorAccess().getGroup(), "rule__Declarator__Group__0");
			builder.put(grammarAccess.getDeclaratorAccess().getGroup_1(), "rule__Declarator__Group_1__0");
			builder.put(grammarAccess.getDeclaratorAccess().getGroup_2(), "rule__Declarator__Group_2__0");
			builder.put(grammarAccess.getPathTypeNameAccess().getGroup(), "rule__PathTypeName__Group__0");
			builder.put(grammarAccess.getPathTypeNameAccess().getGroup_1(), "rule__PathTypeName__Group_1__0");
			builder.put(grammarAccess.getPathNameAccess().getGroup(), "rule__PathName__Group__0");
			builder.put(grammarAccess.getPathNameAccess().getGroup_1(), "rule__PathName__Group_1__0");
			builder.put(grammarAccess.getTimeExpressionAccess().getGroup(), "rule__TimeExpression__Group__0");
			builder.put(grammarAccess.getActualParameterListAccess().getGroup(), "rule__ActualParameterList__Group__0");
			builder.put(grammarAccess.getActualParameterListAccess().getGroup_1(), "rule__ActualParameterList__Group_1__0");
			builder.put(grammarAccess.getNoParamFunctionAccess().getGroup(), "rule__NoParamFunction__Group__0");
			builder.put(grammarAccess.getOneTypeParamFunctionAccess().getGroup(), "rule__OneTypeParamFunction__Group__0");
			builder.put(grammarAccess.getOneStringParamFunctionAccess().getGroup(), "rule__OneStringParamFunction__Group__0");
			builder.put(grammarAccess.getTwoStringParamFunctionAccess().getGroup(), "rule__TwoStringParamFunction__Group__0");
			builder.put(grammarAccess.getOneIntegerParamFunctionAccess().getGroup(), "rule__OneIntegerParamFunction__Group__0");
			builder.put(grammarAccess.getTwoIntegerParamFunctionAccess().getGroup(), "rule__TwoIntegerParamFunction__Group__0");
			builder.put(grammarAccess.getLogicalExpressionAccess().getExpAssignment_0(), "rule__LogicalExpression__ExpAssignment_0");
			builder.put(grammarAccess.getLogicalExpressionAccess().getOpAssignment_1_0(), "rule__LogicalExpression__OpAssignment_1_0");
			builder.put(grammarAccess.getLogicalExpressionAccess().getExpAssignment_1_1(), "rule__LogicalExpression__ExpAssignment_1_1");
			builder.put(grammarAccess.getRelationalExpressionAccess().getExpAssignment_0(), "rule__RelationalExpression__ExpAssignment_0");
			builder.put(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0(), "rule__RelationalExpression__OpAssignment_1_0");
			builder.put(grammarAccess.getRelationalExpressionAccess().getExpAssignment_1_1(), "rule__RelationalExpression__ExpAssignment_1_1");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getExpAssignment_0(), "rule__AdditiveExpression__ExpAssignment_0");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_0(), "rule__AdditiveExpression__OpAssignment_1_0");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getExpAssignment_1_1(), "rule__AdditiveExpression__ExpAssignment_1_1");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getExpAssignment_0(), "rule__MultiplicativeExpression__ExpAssignment_0");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_0(), "rule__MultiplicativeExpression__OpAssignment_1_0");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getExpAssignment_1_1(), "rule__MultiplicativeExpression__ExpAssignment_1_1");
			builder.put(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0(), "rule__UnaryExpression__OpAssignment_0");
			builder.put(grammarAccess.getUnaryExpressionAccess().getExpAssignment_1(), "rule__UnaryExpression__ExpAssignment_1");
			builder.put(grammarAccess.getPostfixExpressionAccess().getOpAssignment_1_0(), "rule__PostfixExpression__OpAssignment_1_0");
			builder.put(grammarAccess.getPostfixExpressionAccess().getFeaturesAssignment_1_1(), "rule__PostfixExpression__FeaturesAssignment_1_1");
			builder.put(grammarAccess.getIfExpressionAccess().getExpAssignment_1(), "rule__IfExpression__ExpAssignment_1");
			builder.put(grammarAccess.getIfExpressionAccess().getExpAssignment_3(), "rule__IfExpression__ExpAssignment_3");
			builder.put(grammarAccess.getIfExpressionAccess().getExpAssignment_4_1(), "rule__IfExpression__ExpAssignment_4_1");
			builder.put(grammarAccess.getFeatureCallParametersAccess().getDecsAssignment_1(), "rule__FeatureCallParameters__DecsAssignment_1");
			builder.put(grammarAccess.getFeatureCallParametersAccess().getParamsAssignment_2(), "rule__FeatureCallParameters__ParamsAssignment_2");
			builder.put(grammarAccess.getLiteralAccess().getNameAssignment_0(), "rule__Literal__NameAssignment_0");
			builder.put(grammarAccess.getLiteralAccess().getNameAssignment_1(), "rule__Literal__NameAssignment_1");
			builder.put(grammarAccess.getLiteralAccess().getNameAssignment_2_1(), "rule__Literal__NameAssignment_2_1");
			builder.put(grammarAccess.getEnumerationTypeAccess().getLeftAssignment_2_1(), "rule__EnumerationType__LeftAssignment_2_1");
			builder.put(grammarAccess.getEnumerationTypeAccess().getRightsAssignment_3_2(), "rule__EnumerationType__RightsAssignment_3_2");
			builder.put(grammarAccess.getLiteralCollectionAccess().getNameAssignment_1(), "rule__LiteralCollection__NameAssignment_1");
			builder.put(grammarAccess.getLiteralCollectionAccess().getExpAssignment_3(), "rule__LiteralCollection__ExpAssignment_3");
			builder.put(grammarAccess.getExpressionListOrRangeAccess().getExpAssignment_0(), "rule__ExpressionListOrRange__ExpAssignment_0");
			builder.put(grammarAccess.getExpressionListOrRangeAccess().getExpAssignment_1_0_1(), "rule__ExpressionListOrRange__ExpAssignment_1_0_1");
			builder.put(grammarAccess.getExpressionListOrRangeAccess().getExpAssignment_1_1_1(), "rule__ExpressionListOrRange__ExpAssignment_1_1_1");
			builder.put(grammarAccess.getFeatureCallAccess().getParamsAssignment_1(), "rule__FeatureCall__ParamsAssignment_1");
			builder.put(grammarAccess.getFeatureCallAccess().getParamsAssignment_2(), "rule__FeatureCall__ParamsAssignment_2");
			builder.put(grammarAccess.getFeatureCallAccess().getParamsAssignment_3(), "rule__FeatureCall__ParamsAssignment_3");
			builder.put(grammarAccess.getDeclaratorAccess().getNameAssignment_0(), "rule__Declarator__NameAssignment_0");
			builder.put(grammarAccess.getDeclaratorAccess().getNameAssignment_1_1(), "rule__Declarator__NameAssignment_1_1");
			builder.put(grammarAccess.getDeclaratorAccess().getTypeAssignment_2_1(), "rule__Declarator__TypeAssignment_2_1");
			builder.put(grammarAccess.getPathTypeNameAccess().getLeftAssignment_0(), "rule__PathTypeName__LeftAssignment_0");
			builder.put(grammarAccess.getPathTypeNameAccess().getRightsAssignment_1_1(), "rule__PathTypeName__RightsAssignment_1_1");
			builder.put(grammarAccess.getPathNameAccess().getLeftAssignment_0(), "rule__PathName__LeftAssignment_0");
			builder.put(grammarAccess.getPathNameAccess().getRightsAssignment_1_1(), "rule__PathName__RightsAssignment_1_1");
			builder.put(grammarAccess.getTimeExpressionAccess().getNameAssignment_1(), "rule__TimeExpression__NameAssignment_1");
			builder.put(grammarAccess.getActualParameterListAccess().getExpAssignment_0(), "rule__ActualParameterList__ExpAssignment_0");
			builder.put(grammarAccess.getActualParameterListAccess().getExpAssignment_1_1(), "rule__ActualParameterList__ExpAssignment_1_1");
			builder.put(grammarAccess.getTypeNameAccess().getNameAssignment(), "rule__TypeName__NameAssignment");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment(), "rule__Attribute__NameAssignment");
			builder.put(grammarAccess.getNoParamFunctionAccess().getNameAssignment_0(), "rule__NoParamFunction__NameAssignment_0");
			builder.put(grammarAccess.getOneTypeParamFunctionAccess().getNameAssignment_0(), "rule__OneTypeParamFunction__NameAssignment_0");
			builder.put(grammarAccess.getOneStringParamFunctionAccess().getNameAssignment_0(), "rule__OneStringParamFunction__NameAssignment_0");
			builder.put(grammarAccess.getTwoStringParamFunctionAccess().getNameAssignment_0(), "rule__TwoStringParamFunction__NameAssignment_0");
			builder.put(grammarAccess.getOneIntegerParamFunctionAccess().getNameAssignment_0(), "rule__OneIntegerParamFunction__NameAssignment_0");
			builder.put(grammarAccess.getTwoIntegerParamFunctionAccess().getNameAssignment_0(), "rule__TwoIntegerParamFunction__NameAssignment_0");
			builder.put(grammarAccess.getCollectionKindAccess().getNameAssignment(), "rule__CollectionKind__NameAssignment");
			builder.put(grammarAccess.getNavigationOperatorAccess().getNameAssignment(), "rule__NavigationOperator__NameAssignment");
			builder.put(grammarAccess.getUnaryOperatorAccess().getNameAssignment(), "rule__UnaryOperator__NameAssignment");
			builder.put(grammarAccess.getMultiplyOperatorAccess().getNameAssignment(), "rule__MultiplyOperator__NameAssignment");
			builder.put(grammarAccess.getAddOperatorAccess().getNameAssignment(), "rule__AddOperator__NameAssignment");
			builder.put(grammarAccess.getRelationalOperatorAccess().getNameAssignment(), "rule__RelationalOperator__NameAssignment");
			builder.put(grammarAccess.getLogicalOperatorAccess().getNameAssignment(), "rule__LogicalOperator__NameAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private OclGrammarAccess grammarAccess;

	@Override
	protected InternalOclParser createParser() {
		InternalOclParser result = new InternalOclParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public OclGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(OclGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
