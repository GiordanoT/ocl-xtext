/*
 * generated by Xtext 2.26.0-SNAPSHOT
 */
grammar InternalOcl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.ocl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.ocl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.ocl.services.OclGrammarAccess;

}

@parser::members {

 	private OclGrammarAccess grammarAccess;

    public InternalOclParser(TokenStream input, OclGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Start";
   	}

   	@Override
   	protected OclGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleStart
entryRuleStart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartRule()); }
	iv_ruleStart=ruleStart
	{ $current=$iv_ruleStart.current; }
	EOF;

// Rule Start
ruleStart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStartAccess().getExpressionParserRuleCall_0());
			}
			this_Expression_0=ruleExpression
			{
				$current = $this_Expression_0.current;
				afterParserOrEnumRuleCall();
			}
		)?
		    |
		{
			newCompositeNode(grammarAccess.getStartAccess().getContextExpressionParserRuleCall_1());
		}
		this_ContextExpression_1=ruleContextExpression
		{
			$current = $this_ContextExpression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleContextExpression
entryRuleContextExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContextExpressionRule()); }
	iv_ruleContextExpression=ruleContextExpression
	{ $current=$iv_ruleContextExpression.current; }
	EOF;

// Rule ContextExpression
ruleContextExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='context'
		{
			newLeafNode(otherlv_0, grammarAccess.getContextExpressionAccess().getContextKeyword_0());
		}
		this_TYPENAME_TERMINAL_1=RULE_TYPENAME_TERMINAL
		{
			newLeafNode(this_TYPENAME_TERMINAL_1, grammarAccess.getContextExpressionAccess().getTYPENAME_TERMINALTerminalRuleCall_1());
		}
		(
			otherlv_2='inv:'
			{
				newLeafNode(otherlv_2, grammarAccess.getContextExpressionAccess().getInvKeyword_2_0());
			}
			    |
			otherlv_3='pre:'
			{
				newLeafNode(otherlv_3, grammarAccess.getContextExpressionAccess().getPreKeyword_2_1());
			}
			    |
			otherlv_4='post:'
			{
				newLeafNode(otherlv_4, grammarAccess.getContextExpressionAccess().getPostKeyword_2_2());
			}
		)
		{
			newCompositeNode(grammarAccess.getContextExpressionAccess().getExpressionParserRuleCall_3());
		}
		this_Expression_5=ruleExpression
		{
			$current = $this_Expression_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getLogicalExpressionParserRuleCall());
	}
	this_LogicalExpression_0=ruleLogicalExpression
	{
		$current = $this_LogicalExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleLogicalExpression
entryRuleLogicalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalExpressionRule()); }
	iv_ruleLogicalExpression=ruleLogicalExpression
	{ $current=$iv_ruleLogicalExpression.current; }
	EOF;

// Rule LogicalExpression
ruleLogicalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLogicalExpressionAccess().getExpRelationalExpressionParserRuleCall_0_0());
				}
				lv_exp_0_0=ruleRelationalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
					}
					add(
						$current,
						"exp",
						lv_exp_0_0,
						"org.xtext.ocl.Ocl.RelationalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalExpressionAccess().getOpLogicalOperatorParserRuleCall_1_0_0());
					}
					lv_op_1_0=ruleLogicalOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
						}
						add(
							$current,
							"op",
							lv_op_1_0,
							"org.xtext.ocl.Ocl.LogicalOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalExpressionAccess().getExpRelationalExpressionParserRuleCall_1_1_0());
					}
					lv_exp_2_0=ruleRelationalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
						}
						add(
							$current,
							"exp",
							lv_exp_2_0,
							"org.xtext.ocl.Ocl.RelationalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	iv_ruleRelationalExpression=ruleRelationalExpression
	{ $current=$iv_ruleRelationalExpression.current; }
	EOF;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationalExpressionAccess().getExpAdditiveExpressionParserRuleCall_0_0());
				}
				lv_exp_0_0=ruleAdditiveExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
					}
					add(
						$current,
						"exp",
						lv_exp_0_0,
						"org.xtext.ocl.Ocl.AdditiveExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOperatorParserRuleCall_1_0_0());
					}
					lv_op_1_0=ruleRelationalOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
						}
						add(
							$current,
							"op",
							lv_op_1_0,
							"org.xtext.ocl.Ocl.RelationalOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelationalExpressionAccess().getExpAdditiveExpressionParserRuleCall_1_1_0());
					}
					lv_exp_2_0=ruleAdditiveExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
						}
						add(
							$current,
							"exp",
							lv_exp_2_0,
							"org.xtext.ocl.Ocl.AdditiveExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	iv_ruleAdditiveExpression=ruleAdditiveExpression
	{ $current=$iv_ruleAdditiveExpression.current; }
	EOF;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getExpMultiplicativeExpressionParserRuleCall_0_0());
				}
				lv_exp_0_0=ruleMultiplicativeExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
					}
					add(
						$current,
						"exp",
						lv_exp_0_0,
						"org.xtext.ocl.Ocl.MultiplicativeExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOpAddOperatorParserRuleCall_1_0_0());
					}
					lv_op_1_0=ruleAddOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
						}
						add(
							$current,
							"op",
							lv_op_1_0,
							"org.xtext.ocl.Ocl.AddOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getExpMultiplicativeExpressionParserRuleCall_1_1_0());
					}
					lv_exp_2_0=ruleMultiplicativeExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
						}
						add(
							$current,
							"exp",
							lv_exp_2_0,
							"org.xtext.ocl.Ocl.MultiplicativeExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression
	{ $current=$iv_ruleMultiplicativeExpression.current; }
	EOF;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getExpUnaryExpressionParserRuleCall_0_0());
				}
				lv_exp_0_0=ruleUnaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
					}
					add(
						$current,
						"exp",
						lv_exp_0_0,
						"org.xtext.ocl.Ocl.UnaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOpMultiplyOperatorParserRuleCall_1_0_0());
					}
					lv_op_1_0=ruleMultiplyOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
						}
						add(
							$current,
							"op",
							lv_op_1_0,
							"org.xtext.ocl.Ocl.MultiplyOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getExpUnaryExpressionParserRuleCall_1_1_0());
					}
					lv_exp_2_0=ruleUnaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
						}
						add(
							$current,
							"exp",
							lv_exp_2_0,
							"org.xtext.ocl.Ocl.UnaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	iv_ruleUnaryExpression=ruleUnaryExpression
	{ $current=$iv_ruleUnaryExpression.current; }
	EOF;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorParserRuleCall_0_0());
				}
				lv_op_0_0=ruleUnaryOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
					}
					add(
						$current,
						"op",
						lv_op_0_0,
						"org.xtext.ocl.Ocl.UnaryOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpPostfixExpressionParserRuleCall_1_0());
				}
				lv_exp_1_0=rulePostfixExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
					}
					set(
						$current,
						"exp",
						lv_exp_1_0,
						"org.xtext.ocl.Ocl.PostfixExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePostfixExpression
entryRulePostfixExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPostfixExpressionRule()); }
	iv_rulePostfixExpression=rulePostfixExpression
	{ $current=$iv_rulePostfixExpression.current; }
	EOF;

// Rule PostfixExpression
rulePostfixExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPostfixExpressionAccess().getPrimaryExpressionParserRuleCall_0());
		}
		this_PrimaryExpression_0=rulePrimaryExpression
		{
			$current = $this_PrimaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPostfixExpressionAccess().getOpNavigationOperatorParserRuleCall_1_0_0());
					}
					lv_op_1_0=ruleNavigationOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
						}
						add(
							$current,
							"op",
							lv_op_1_0,
							"org.xtext.ocl.Ocl.NavigationOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPostfixExpressionAccess().getFeaturesFeatureCallParserRuleCall_1_1_0());
					}
					lv_features_2_0=ruleFeatureCall
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
						}
						add(
							$current,
							"features",
							lv_features_2_0,
							"org.xtext.ocl.Ocl.FeatureCall");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	iv_rulePrimaryExpression=rulePrimaryExpression
	{ $current=$iv_rulePrimaryExpression.current; }
	EOF;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralCollectionParserRuleCall_0());
		}
		this_LiteralCollection_0=ruleLiteralCollection
		{
			$current = $this_LiteralCollection_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_1());
		}
		this_Literal_1=ruleLiteral
		{
			$current = $this_Literal_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_2());
		}
		this_FeatureCall_2=ruleFeatureCall
		{
			$current = $this_FeatureCall_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_3_1());
			}
			this_Expression_4=ruleExpression
			{
				$current = $this_Expression_4.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_3_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIfExpressionParserRuleCall_4());
		}
		this_IfExpression_6=ruleIfExpression
		{
			$current = $this_IfExpression_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIfExpression
entryRuleIfExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfExpressionRule()); }
	iv_ruleIfExpression=ruleIfExpression
	{ $current=$iv_ruleIfExpression.current; }
	EOF;

// Rule IfExpression
ruleIfExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfExpressionAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpressionAccess().getExpExpressionParserRuleCall_1_0());
				}
				lv_exp_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
					}
					add(
						$current,
						"exp",
						lv_exp_1_0,
						"org.xtext.ocl.Ocl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getIfExpressionAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpressionAccess().getExpExpressionParserRuleCall_3_0());
				}
				lv_exp_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
					}
					add(
						$current,
						"exp",
						lv_exp_3_0,
						"org.xtext.ocl.Ocl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='else'
			{
				newLeafNode(otherlv_4, grammarAccess.getIfExpressionAccess().getElseKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfExpressionAccess().getExpExpressionParserRuleCall_4_1_0());
					}
					lv_exp_5_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
						}
						add(
							$current,
							"exp",
							lv_exp_5_0,
							"org.xtext.ocl.Ocl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='endif'
		{
			newLeafNode(otherlv_6, grammarAccess.getIfExpressionAccess().getEndifKeyword_5());
		}
	)
;

// Entry rule entryRuleFeatureCallParameters
entryRuleFeatureCallParameters returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureCallParametersRule()); }
	iv_ruleFeatureCallParameters=ruleFeatureCallParameters
	{ $current=$iv_ruleFeatureCallParameters.current; }
	EOF;

// Rule FeatureCallParameters
ruleFeatureCallParameters returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getFeatureCallParametersAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureCallParametersAccess().getDecsDeclaratorParserRuleCall_1_0());
				}
				lv_decs_1_0=ruleDeclarator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureCallParametersRule());
					}
					set(
						$current,
						"decs",
						lv_decs_1_0,
						"org.xtext.ocl.Ocl.Declarator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureCallParametersAccess().getParamsActualParameterListParserRuleCall_2_0());
				}
				lv_params_2_0=ruleActualParameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureCallParametersRule());
					}
					set(
						$current,
						"params",
						lv_params_2_0,
						"org.xtext.ocl.Ocl.ActualParameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getFeatureCallParametersAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_STRING
				{
					newLeafNode(lv_name_0_0, grammarAccess.getLiteralAccess().getNameSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		(
			(
				lv_name_1_0=RULE_NUMBER
				{
					newLeafNode(lv_name_1_0, grammarAccess.getLiteralAccess().getNameNUMBERTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.ocl.Ocl.NUMBER");
				}
			)
		)
		    |
		(
			otherlv_2='#'
			{
				newLeafNode(otherlv_2, grammarAccess.getLiteralAccess().getNumberSignKeyword_2_0());
			}
			(
				(
					lv_name_3_0=RULE_NAME_TERMINAL
					{
						newLeafNode(lv_name_3_0, grammarAccess.getLiteralAccess().getNameNAME_TERMINALTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLiteralRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_3_0,
							"org.xtext.ocl.Ocl.NAME_TERMINAL");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleEnumerationType
entryRuleEnumerationType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumerationTypeRule()); }
	iv_ruleEnumerationType=ruleEnumerationType
	{ $current=$iv_ruleEnumerationType.current; }
	EOF;

// Rule EnumerationType
ruleEnumerationType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='enum'
		{
			newLeafNode(otherlv_0, grammarAccess.getEnumerationTypeAccess().getEnumKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getEnumerationTypeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			otherlv_2='#'
			{
				newLeafNode(otherlv_2, grammarAccess.getEnumerationTypeAccess().getNumberSignKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEnumerationTypeAccess().getLeftNameParserRuleCall_2_1_0());
					}
					lv_left_3_0=ruleName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnumerationTypeRule());
						}
						set(
							$current,
							"left",
							lv_left_3_0,
							"org.xtext.ocl.Ocl.Name");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getEnumerationTypeAccess().getCommaKeyword_3_0());
			}
			otherlv_5='#'
			{
				newLeafNode(otherlv_5, grammarAccess.getEnumerationTypeAccess().getNumberSignKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEnumerationTypeAccess().getRightsNameParserRuleCall_3_2_0());
					}
					lv_rights_6_0=ruleName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnumerationTypeRule());
						}
						add(
							$current,
							"rights",
							lv_rights_6_0,
							"org.xtext.ocl.Ocl.Name");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getEnumerationTypeAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleSimpleTypeSpecifier
entryRuleSimpleTypeSpecifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleTypeSpecifierRule()); }
	iv_ruleSimpleTypeSpecifier=ruleSimpleTypeSpecifier
	{ $current=$iv_ruleSimpleTypeSpecifier.current; }
	EOF;

// Rule SimpleTypeSpecifier
ruleSimpleTypeSpecifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSimpleTypeSpecifierAccess().getPathTypeNameParserRuleCall_0());
		}
		this_PathTypeName_0=rulePathTypeName
		{
			$current = $this_PathTypeName_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSimpleTypeSpecifierAccess().getEnumerationTypeParserRuleCall_1());
		}
		this_EnumerationType_1=ruleEnumerationType
		{
			$current = $this_EnumerationType_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLiteralCollection
entryRuleLiteralCollection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralCollectionRule()); }
	iv_ruleLiteralCollection=ruleLiteralCollection
	{ $current=$iv_ruleLiteralCollection.current; }
	EOF;

// Rule LiteralCollection
ruleLiteralCollection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLiteralCollectionAccess().getLiteralCollectionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralCollectionAccess().getNameCollectionKindParserRuleCall_1_0());
				}
				lv_name_1_0=ruleCollectionKind
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralCollectionRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.ocl.Ocl.CollectionKind");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getLiteralCollectionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralCollectionAccess().getExpExpressionListOrRangeParserRuleCall_3_0());
				}
				lv_exp_3_0=ruleExpressionListOrRange
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralCollectionRule());
					}
					set(
						$current,
						"exp",
						lv_exp_3_0,
						"org.xtext.ocl.Ocl.ExpressionListOrRange");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getLiteralCollectionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleExpressionListOrRange
entryRuleExpressionListOrRange returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionListOrRangeRule()); }
	iv_ruleExpressionListOrRange=ruleExpressionListOrRange
	{ $current=$iv_ruleExpressionListOrRange.current; }
	EOF;

// Rule ExpressionListOrRange
ruleExpressionListOrRange returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionListOrRangeAccess().getExpExpressionParserRuleCall_0_0());
				}
				lv_exp_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionListOrRangeRule());
					}
					add(
						$current,
						"exp",
						lv_exp_0_0,
						"org.xtext.ocl.Ocl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_1=','
				{
					newLeafNode(otherlv_1, grammarAccess.getExpressionListOrRangeAccess().getCommaKeyword_1_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionListOrRangeAccess().getExpExpressionParserRuleCall_1_0_1_0());
						}
						lv_exp_2_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionListOrRangeRule());
							}
							add(
								$current,
								"exp",
								lv_exp_2_0,
								"org.xtext.ocl.Ocl.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
			    |
			(
				otherlv_3='..'
				{
					newLeafNode(otherlv_3, grammarAccess.getExpressionListOrRangeAccess().getFullStopFullStopKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionListOrRangeAccess().getExpExpressionParserRuleCall_1_1_1_0());
						}
						lv_exp_4_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionListOrRangeRule());
							}
							add(
								$current,
								"exp",
								lv_exp_4_0,
								"org.xtext.ocl.Ocl.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleFeatureCall
entryRuleFeatureCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureCallRule()); }
	iv_ruleFeatureCall=ruleFeatureCall
	{ $current=$iv_ruleFeatureCall.current; }
	EOF;

// Rule FeatureCall
ruleFeatureCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFeatureCallAccess().getPathNameParserRuleCall_0());
		}
		this_PathName_0=rulePathName
		{
			$current = $this_PathName_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureCallAccess().getParamsTimeExpressionParserRuleCall_1_0());
				}
				lv_params_1_0=ruleTimeExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureCallRule());
					}
					add(
						$current,
						"params",
						lv_params_1_0,
						"org.xtext.ocl.Ocl.TimeExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureCallAccess().getParamsQualifiersParserRuleCall_2_0());
				}
				lv_params_2_0=ruleQualifiers
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureCallRule());
					}
					add(
						$current,
						"params",
						lv_params_2_0,
						"org.xtext.ocl.Ocl.Qualifiers");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureCallAccess().getParamsFeatureCallParametersParserRuleCall_3_0());
				}
				lv_params_3_0=ruleFeatureCallParameters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureCallRule());
					}
					add(
						$current,
						"params",
						lv_params_3_0,
						"org.xtext.ocl.Ocl.FeatureCallParameters");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleQualifiers
entryRuleQualifiers returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQualifiersRule()); }
	iv_ruleQualifiers=ruleQualifiers
	{ $current=$iv_ruleQualifiers.current; }
	EOF;

// Rule Qualifiers
ruleQualifiers returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getQualifiersAccess().getLeftSquareBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getQualifiersAccess().getActualParameterListParserRuleCall_1());
		}
		this_ActualParameterList_1=ruleActualParameterList
		{
			$current = $this_ActualParameterList_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getQualifiersAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleDeclarator
entryRuleDeclarator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclaratorRule()); }
	iv_ruleDeclarator=ruleDeclarator
	{ $current=$iv_ruleDeclarator.current; }
	EOF;

// Rule Declarator
ruleDeclarator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclaratorAccess().getNameNameParserRuleCall_0_0());
				}
				lv_name_0_0=ruleName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclaratorRule());
					}
					add(
						$current,
						"name",
						lv_name_0_0,
						"org.xtext.ocl.Ocl.Name");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getDeclaratorAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDeclaratorAccess().getNameNameParserRuleCall_1_1_0());
					}
					lv_name_2_0=ruleName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeclaratorRule());
						}
						add(
							$current,
							"name",
							lv_name_2_0,
							"org.xtext.ocl.Ocl.Name");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			this_COLON_3=RULE_COLON
			{
				newLeafNode(this_COLON_3, grammarAccess.getDeclaratorAccess().getCOLONTerminalRuleCall_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDeclaratorAccess().getTypeSimpleTypeSpecifierParserRuleCall_2_1_0());
					}
					lv_type_4_0=ruleSimpleTypeSpecifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeclaratorRule());
						}
						set(
							$current,
							"type",
							lv_type_4_0,
							"org.xtext.ocl.Ocl.SimpleTypeSpecifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='|'
		{
			newLeafNode(otherlv_5, grammarAccess.getDeclaratorAccess().getVerticalLineKeyword_3());
		}
	)
;

// Entry rule entryRulePathTypeName
entryRulePathTypeName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPathTypeNameRule()); }
	iv_rulePathTypeName=rulePathTypeName
	{ $current=$iv_rulePathTypeName.current; }
	EOF;

// Rule PathTypeName
rulePathTypeName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPathTypeNameAccess().getLeftTypeNameParserRuleCall_0_0());
				}
				lv_left_0_0=ruleTypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPathTypeNameRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"org.xtext.ocl.Ocl.TypeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_DOUBLE_COLON_1=RULE_DOUBLE_COLON
			{
				newLeafNode(this_DOUBLE_COLON_1, grammarAccess.getPathTypeNameAccess().getDOUBLE_COLONTerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPathTypeNameAccess().getRightsTypeNameParserRuleCall_1_1_0());
					}
					lv_rights_2_0=ruleTypeName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPathTypeNameRule());
						}
						add(
							$current,
							"rights",
							lv_rights_2_0,
							"org.xtext.ocl.Ocl.TypeName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePathName
entryRulePathName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPathNameRule()); }
	iv_rulePathName=rulePathName
	{ $current=$iv_rulePathName.current; }
	EOF;

// Rule PathName
rulePathName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPathNameAccess().getLeftTypeNameParserRuleCall_0_0_0());
					}
					lv_left_0_1=ruleTypeName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPathNameRule());
						}
						set(
							$current,
							"left",
							lv_left_0_1,
							"org.xtext.ocl.Ocl.TypeName");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getPathNameAccess().getLeftNameParserRuleCall_0_0_1());
					}
					lv_left_0_2=ruleName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPathNameRule());
						}
						set(
							$current,
							"left",
							lv_left_0_2,
							"org.xtext.ocl.Ocl.Name");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			this_DOUBLE_COLON_1=RULE_DOUBLE_COLON
			{
				newLeafNode(this_DOUBLE_COLON_1, grammarAccess.getPathNameAccess().getDOUBLE_COLONTerminalRuleCall_1_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getPathNameAccess().getRightsTypeNameParserRuleCall_1_1_0_0());
						}
						lv_rights_2_1=ruleTypeName
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPathNameRule());
							}
							add(
								$current,
								"rights",
								lv_rights_2_1,
								"org.xtext.ocl.Ocl.TypeName");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getPathNameAccess().getRightsNameParserRuleCall_1_1_0_1());
						}
						lv_rights_2_2=ruleName
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPathNameRule());
							}
							add(
								$current,
								"rights",
								lv_rights_2_2,
								"org.xtext.ocl.Ocl.Name");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleTimeExpression
entryRuleTimeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeExpressionRule()); }
	iv_ruleTimeExpression=ruleTimeExpression
	{ $current=$iv_ruleTimeExpression.current; }
	EOF;

// Rule TimeExpression
ruleTimeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@'
		{
			newLeafNode(otherlv_0, grammarAccess.getTimeExpressionAccess().getCommercialAtKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_NAME_TERMINAL
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTimeExpressionAccess().getNameNAME_TERMINALTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeExpressionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.ocl.Ocl.NAME_TERMINAL");
				}
			)
		)
	)
;

// Entry rule entryRuleActualParameterList
entryRuleActualParameterList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActualParameterListRule()); }
	iv_ruleActualParameterList=ruleActualParameterList
	{ $current=$iv_ruleActualParameterList.current; }
	EOF;

// Rule ActualParameterList
ruleActualParameterList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getActualParameterListAccess().getExpExpressionParserRuleCall_0_0());
				}
				lv_exp_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActualParameterListRule());
					}
					add(
						$current,
						"exp",
						lv_exp_0_0,
						"org.xtext.ocl.Ocl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getActualParameterListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActualParameterListAccess().getExpExpressionParserRuleCall_1_1_0());
					}
					lv_exp_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActualParameterListRule());
						}
						add(
							$current,
							"exp",
							lv_exp_2_0,
							"org.xtext.ocl.Ocl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleTypeName
entryRuleTypeName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeNameRule()); }
	iv_ruleTypeName=ruleTypeName
	{ $current=$iv_ruleTypeName.current; }
	EOF;

// Rule TypeName
ruleTypeName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_TYPENAME_TERMINAL
			{
				newLeafNode(lv_name_0_0, grammarAccess.getTypeNameAccess().getNameTYPENAME_TERMINALTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTypeNameRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.xtext.ocl.Ocl.TYPENAME_TERMINAL");
			}
		)
	)
;

// Entry rule entryRuleName
entryRuleName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNameRule()); }
	iv_ruleName=ruleName
	{ $current=$iv_ruleName.current; }
	EOF;

// Rule Name
ruleName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNameAccess().getAttributeParserRuleCall_0());
		}
		this_Attribute_0=ruleAttribute
		{
			$current = $this_Attribute_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNameAccess().getFunctionParserRuleCall_1());
		}
		this_Function_1=ruleFunction
		{
			$current = $this_Function_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_NAME_TERMINAL
			{
				newLeafNode(lv_name_0_0, grammarAccess.getAttributeAccess().getNameNAME_TERMINALTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAttributeRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.xtext.ocl.Ocl.NAME_TERMINAL");
			}
		)
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getNoParamFunctionParserRuleCall_0());
		}
		this_NoParamFunction_0=ruleNoParamFunction
		{
			$current = $this_NoParamFunction_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getOneTypeParamFunctionParserRuleCall_1());
		}
		this_OneTypeParamFunction_1=ruleOneTypeParamFunction
		{
			$current = $this_OneTypeParamFunction_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getOneStringParamFunctionParserRuleCall_2());
		}
		this_OneStringParamFunction_2=ruleOneStringParamFunction
		{
			$current = $this_OneStringParamFunction_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getTwoStringParamFunctionParserRuleCall_3());
		}
		this_TwoStringParamFunction_3=ruleTwoStringParamFunction
		{
			$current = $this_TwoStringParamFunction_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getTwoIntegerParamFunctionParserRuleCall_4());
		}
		this_TwoIntegerParamFunction_4=ruleTwoIntegerParamFunction
		{
			$current = $this_TwoIntegerParamFunction_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getOneIntegerParamFunctionParserRuleCall_5());
		}
		this_OneIntegerParamFunction_5=ruleOneIntegerParamFunction
		{
			$current = $this_OneIntegerParamFunction_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNoParamFunction
entryRuleNoParamFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNoParamFunctionRule()); }
	iv_ruleNoParamFunction=ruleNoParamFunction
	{ $current=$iv_ruleNoParamFunction.current; }
	EOF;

// Rule NoParamFunction
ruleNoParamFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_1='allInstaces'
					{
						newLeafNode(lv_name_0_1, grammarAccess.getNoParamFunctionAccess().getNameAllInstacesKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_1, null);
					}
					    |
					lv_name_0_2='oclType'
					{
						newLeafNode(lv_name_0_2, grammarAccess.getNoParamFunctionAccess().getNameOclTypeKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_2, null);
					}
					    |
					lv_name_0_3='toString'
					{
						newLeafNode(lv_name_0_3, grammarAccess.getNoParamFunctionAccess().getNameToStringKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_3, null);
					}
					    |
					lv_name_0_4='refImmediateComposite'
					{
						newLeafNode(lv_name_0_4, grammarAccess.getNoParamFunctionAccess().getNameRefImmediateCompositeKeyword_0_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_4, null);
					}
					    |
					lv_name_0_5='size'
					{
						newLeafNode(lv_name_0_5, grammarAccess.getNoParamFunctionAccess().getNameSizeKeyword_0_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_5, null);
					}
					    |
					lv_name_0_6='toInteger'
					{
						newLeafNode(lv_name_0_6, grammarAccess.getNoParamFunctionAccess().getNameToIntegerKeyword_0_0_5());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_6, null);
					}
					    |
					lv_name_0_7='toUpper'
					{
						newLeafNode(lv_name_0_7, grammarAccess.getNoParamFunctionAccess().getNameToUpperKeyword_0_0_6());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_7, null);
					}
					    |
					lv_name_0_8='toReal'
					{
						newLeafNode(lv_name_0_8, grammarAccess.getNoParamFunctionAccess().getNameToRealKeyword_0_0_7());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_8, null);
					}
					    |
					lv_name_0_9='toLower'
					{
						newLeafNode(lv_name_0_9, grammarAccess.getNoParamFunctionAccess().getNameToLowerKeyword_0_0_8());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_9, null);
					}
					    |
					lv_name_0_10='toSequence'
					{
						newLeafNode(lv_name_0_10, grammarAccess.getNoParamFunctionAccess().getNameToSequenceKeyword_0_0_9());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_10, null);
					}
					    |
					lv_name_0_11='trim'
					{
						newLeafNode(lv_name_0_11, grammarAccess.getNoParamFunctionAccess().getNameTrimKeyword_0_0_10());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_11, null);
					}
					    |
					lv_name_0_12='isEmpty'
					{
						newLeafNode(lv_name_0_12, grammarAccess.getNoParamFunctionAccess().getNameIsEmptyKeyword_0_0_11());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_12, null);
					}
					    |
					lv_name_0_13='oclIsUndefined'
					{
						newLeafNode(lv_name_0_13, grammarAccess.getNoParamFunctionAccess().getNameOclIsUndefinedKeyword_0_0_12());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_13, null);
					}
					    |
					lv_name_0_14='floor'
					{
						newLeafNode(lv_name_0_14, grammarAccess.getNoParamFunctionAccess().getNameFloorKeyword_0_0_13());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_14, null);
					}
					    |
					lv_name_0_15='round'
					{
						newLeafNode(lv_name_0_15, grammarAccess.getNoParamFunctionAccess().getNameRoundKeyword_0_0_14());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_15, null);
					}
					    |
					lv_name_0_16='notEmpty'
					{
						newLeafNode(lv_name_0_16, grammarAccess.getNoParamFunctionAccess().getNameNotEmptyKeyword_0_0_15());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_16, null);
					}
					    |
					lv_name_0_17='asBag'
					{
						newLeafNode(lv_name_0_17, grammarAccess.getNoParamFunctionAccess().getNameAsBagKeyword_0_0_16());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_17, null);
					}
					    |
					lv_name_0_18='asSequence'
					{
						newLeafNode(lv_name_0_18, grammarAccess.getNoParamFunctionAccess().getNameAsSequenceKeyword_0_0_17());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_18, null);
					}
					    |
					lv_name_0_19='sum'
					{
						newLeafNode(lv_name_0_19, grammarAccess.getNoParamFunctionAccess().getNameSumKeyword_0_0_18());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_19, null);
					}
					    |
					lv_name_0_20='asSet'
					{
						newLeafNode(lv_name_0_20, grammarAccess.getNoParamFunctionAccess().getNameAsSetKeyword_0_0_19());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_20, null);
					}
					    |
					lv_name_0_21='flatten'
					{
						newLeafNode(lv_name_0_21, grammarAccess.getNoParamFunctionAccess().getNameFlattenKeyword_0_0_20());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_21, null);
					}
					    |
					lv_name_0_22='first'
					{
						newLeafNode(lv_name_0_22, grammarAccess.getNoParamFunctionAccess().getNameFirstKeyword_0_0_21());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_22, null);
					}
					    |
					lv_name_0_23='last'
					{
						newLeafNode(lv_name_0_23, grammarAccess.getNoParamFunctionAccess().getNameLastKeyword_0_0_22());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNoParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_23, null);
					}
				)
			)
		)
		otherlv_1='()'
		{
			newLeafNode(otherlv_1, grammarAccess.getNoParamFunctionAccess().getLeftParenthesisRightParenthesisKeyword_1());
		}
	)
;

// Entry rule entryRuleOneTypeParamFunction
entryRuleOneTypeParamFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOneTypeParamFunctionRule()); }
	iv_ruleOneTypeParamFunction=ruleOneTypeParamFunction
	{ $current=$iv_ruleOneTypeParamFunction.current; }
	EOF;

// Rule OneTypeParamFunction
ruleOneTypeParamFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_1='oclTypeOf'
					{
						newLeafNode(lv_name_0_1, grammarAccess.getOneTypeParamFunctionAccess().getNameOclTypeOfKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOneTypeParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_1, null);
					}
					    |
					lv_name_0_2='oclisKindOf'
					{
						newLeafNode(lv_name_0_2, grammarAccess.getOneTypeParamFunctionAccess().getNameOclisKindOfKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOneTypeParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_2, null);
					}
				)
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getOneTypeParamFunctionAccess().getLeftParenthesisKeyword_1());
		}
		this_TYPENAME_TERMINAL_2=RULE_TYPENAME_TERMINAL
		{
			newLeafNode(this_TYPENAME_TERMINAL_2, grammarAccess.getOneTypeParamFunctionAccess().getTYPENAME_TERMINALTerminalRuleCall_2());
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getOneTypeParamFunctionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleOneStringParamFunction
entryRuleOneStringParamFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOneStringParamFunctionRule()); }
	iv_ruleOneStringParamFunction=ruleOneStringParamFunction
	{ $current=$iv_ruleOneStringParamFunction.current; }
	EOF;

// Rule OneStringParamFunction
ruleOneStringParamFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_1='concat'
					{
						newLeafNode(lv_name_0_1, grammarAccess.getOneStringParamFunctionAccess().getNameConcatKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOneStringParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_1, null);
					}
					    |
					lv_name_0_2='startsWith'
					{
						newLeafNode(lv_name_0_2, grammarAccess.getOneStringParamFunctionAccess().getNameStartsWithKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOneStringParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_2, null);
					}
					    |
					lv_name_0_3='endsWith'
					{
						newLeafNode(lv_name_0_3, grammarAccess.getOneStringParamFunctionAccess().getNameEndsWithKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOneStringParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_3, null);
					}
					    |
					lv_name_0_4='indexOf'
					{
						newLeafNode(lv_name_0_4, grammarAccess.getOneStringParamFunctionAccess().getNameIndexOfKeyword_0_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOneStringParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_4, null);
					}
					    |
					lv_name_0_5='lastIndexOf'
					{
						newLeafNode(lv_name_0_5, grammarAccess.getOneStringParamFunctionAccess().getNameLastIndexOfKeyword_0_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOneStringParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_5, null);
					}
					    |
					lv_name_0_6='split'
					{
						newLeafNode(lv_name_0_6, grammarAccess.getOneStringParamFunctionAccess().getNameSplitKeyword_0_0_5());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOneStringParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_6, null);
					}
				)
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getOneStringParamFunctionAccess().getLeftParenthesisKeyword_1());
		}
		this_STRING_2=RULE_STRING
		{
			newLeafNode(this_STRING_2, grammarAccess.getOneStringParamFunctionAccess().getSTRINGTerminalRuleCall_2());
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getOneStringParamFunctionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleTwoStringParamFunction
entryRuleTwoStringParamFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTwoStringParamFunctionRule()); }
	iv_ruleTwoStringParamFunction=ruleTwoStringParamFunction
	{ $current=$iv_ruleTwoStringParamFunction.current; }
	EOF;

// Rule TwoStringParamFunction
ruleTwoStringParamFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_1='replaceAll'
					{
						newLeafNode(lv_name_0_1, grammarAccess.getTwoStringParamFunctionAccess().getNameReplaceAllKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTwoStringParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_1, null);
					}
					    |
					lv_name_0_2='regexReplaceAll'
					{
						newLeafNode(lv_name_0_2, grammarAccess.getTwoStringParamFunctionAccess().getNameRegexReplaceAllKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTwoStringParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_2, null);
					}
				)
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getTwoStringParamFunctionAccess().getLeftParenthesisKeyword_1());
		}
		this_STRING_2=RULE_STRING
		{
			newLeafNode(this_STRING_2, grammarAccess.getTwoStringParamFunctionAccess().getSTRINGTerminalRuleCall_2());
		}
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getTwoStringParamFunctionAccess().getCommaKeyword_3());
		}
		this_STRING_4=RULE_STRING
		{
			newLeafNode(this_STRING_4, grammarAccess.getTwoStringParamFunctionAccess().getSTRINGTerminalRuleCall_4());
		}
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getTwoStringParamFunctionAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleOneIntegerParamFunction
entryRuleOneIntegerParamFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOneIntegerParamFunctionRule()); }
	iv_ruleOneIntegerParamFunction=ruleOneIntegerParamFunction
	{ $current=$iv_ruleOneIntegerParamFunction.current; }
	EOF;

// Rule OneIntegerParamFunction
ruleOneIntegerParamFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='at'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getOneIntegerParamFunctionAccess().getNameAtKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOneIntegerParamFunctionRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "at");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getOneIntegerParamFunctionAccess().getLeftParenthesisKeyword_1());
		}
		this_NUMBER_2=RULE_NUMBER
		{
			newLeafNode(this_NUMBER_2, grammarAccess.getOneIntegerParamFunctionAccess().getNUMBERTerminalRuleCall_2());
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getOneIntegerParamFunctionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleTwoIntegerParamFunction
entryRuleTwoIntegerParamFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTwoIntegerParamFunctionRule()); }
	iv_ruleTwoIntegerParamFunction=ruleTwoIntegerParamFunction
	{ $current=$iv_ruleTwoIntegerParamFunction.current; }
	EOF;

// Rule TwoIntegerParamFunction
ruleTwoIntegerParamFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_1='substring'
					{
						newLeafNode(lv_name_0_1, grammarAccess.getTwoIntegerParamFunctionAccess().getNameSubstringKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTwoIntegerParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_1, null);
					}
					    |
					lv_name_0_2='subSequence'
					{
						newLeafNode(lv_name_0_2, grammarAccess.getTwoIntegerParamFunctionAccess().getNameSubSequenceKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTwoIntegerParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_2, null);
					}
					    |
					lv_name_0_3='subOrderedSet'
					{
						newLeafNode(lv_name_0_3, grammarAccess.getTwoIntegerParamFunctionAccess().getNameSubOrderedSetKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTwoIntegerParamFunctionRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_3, null);
					}
				)
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getTwoIntegerParamFunctionAccess().getLeftParenthesisKeyword_1());
		}
		this_NUMBER_2=RULE_NUMBER
		{
			newLeafNode(this_NUMBER_2, grammarAccess.getTwoIntegerParamFunctionAccess().getNUMBERTerminalRuleCall_2());
		}
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getTwoIntegerParamFunctionAccess().getCommaKeyword_3());
		}
		this_NUMBER_4=RULE_NUMBER
		{
			newLeafNode(this_NUMBER_4, grammarAccess.getTwoIntegerParamFunctionAccess().getNUMBERTerminalRuleCall_4());
		}
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getTwoIntegerParamFunctionAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleCollectionKind
entryRuleCollectionKind returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollectionKindRule()); }
	iv_ruleCollectionKind=ruleCollectionKind
	{ $current=$iv_ruleCollectionKind.current; }
	EOF;

// Rule CollectionKind
ruleCollectionKind returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_1='Set'
				{
					newLeafNode(lv_name_0_1, grammarAccess.getCollectionKindAccess().getNameSetKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCollectionKindRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_1, null);
				}
				    |
				lv_name_0_2='Bag'
				{
					newLeafNode(lv_name_0_2, grammarAccess.getCollectionKindAccess().getNameBagKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCollectionKindRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_2, null);
				}
				    |
				lv_name_0_3='Sequence'
				{
					newLeafNode(lv_name_0_3, grammarAccess.getCollectionKindAccess().getNameSequenceKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCollectionKindRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_3, null);
				}
				    |
				lv_name_0_4='Collection'
				{
					newLeafNode(lv_name_0_4, grammarAccess.getCollectionKindAccess().getNameCollectionKeyword_0_3());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCollectionKindRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_4, null);
				}
			)
		)
	)
;

// Entry rule entryRuleNavigationOperator
entryRuleNavigationOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNavigationOperatorRule()); }
	iv_ruleNavigationOperator=ruleNavigationOperator
	{ $current=$iv_ruleNavigationOperator.current; }
	EOF;

// Rule NavigationOperator
ruleNavigationOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_1='.'
				{
					newLeafNode(lv_name_0_1, grammarAccess.getNavigationOperatorAccess().getNameFullStopKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNavigationOperatorRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_1, null);
				}
				    |
				lv_name_0_2='->'
				{
					newLeafNode(lv_name_0_2, grammarAccess.getNavigationOperatorAccess().getNameHyphenMinusGreaterThanSignKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNavigationOperatorRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_2, null);
				}
			)
		)
	)
;

// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryOperatorRule()); }
	iv_ruleUnaryOperator=ruleUnaryOperator
	{ $current=$iv_ruleUnaryOperator.current; }
	EOF;

// Rule UnaryOperator
ruleUnaryOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_1='-'
				{
					newLeafNode(lv_name_0_1, grammarAccess.getUnaryOperatorAccess().getNameHyphenMinusKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnaryOperatorRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_1, null);
				}
				    |
				lv_name_0_2='not'
				{
					newLeafNode(lv_name_0_2, grammarAccess.getUnaryOperatorAccess().getNameNotKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnaryOperatorRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_2, null);
				}
			)
		)
	)
;

// Entry rule entryRuleMultiplyOperator
entryRuleMultiplyOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplyOperatorRule()); }
	iv_ruleMultiplyOperator=ruleMultiplyOperator
	{ $current=$iv_ruleMultiplyOperator.current; }
	EOF;

// Rule MultiplyOperator
ruleMultiplyOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_1='*'
				{
					newLeafNode(lv_name_0_1, grammarAccess.getMultiplyOperatorAccess().getNameAsteriskKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultiplyOperatorRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_1, null);
				}
				    |
				lv_name_0_2='/'
				{
					newLeafNode(lv_name_0_2, grammarAccess.getMultiplyOperatorAccess().getNameSolidusKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultiplyOperatorRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_2, null);
				}
			)
		)
	)
;

// Entry rule entryRuleAddOperator
entryRuleAddOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddOperatorRule()); }
	iv_ruleAddOperator=ruleAddOperator
	{ $current=$iv_ruleAddOperator.current; }
	EOF;

// Rule AddOperator
ruleAddOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_1='+'
				{
					newLeafNode(lv_name_0_1, grammarAccess.getAddOperatorAccess().getNamePlusSignKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddOperatorRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_1, null);
				}
				    |
				lv_name_0_2='-'
				{
					newLeafNode(lv_name_0_2, grammarAccess.getAddOperatorAccess().getNameHyphenMinusKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddOperatorRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_2, null);
				}
			)
		)
	)
;

// Entry rule entryRuleRelationalOperator
entryRuleRelationalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationalOperatorRule()); }
	iv_ruleRelationalOperator=ruleRelationalOperator
	{ $current=$iv_ruleRelationalOperator.current; }
	EOF;

// Rule RelationalOperator
ruleRelationalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_1='='
				{
					newLeafNode(lv_name_0_1, grammarAccess.getRelationalOperatorAccess().getNameEqualsSignKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelationalOperatorRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_1, null);
				}
				    |
				lv_name_0_2='>'
				{
					newLeafNode(lv_name_0_2, grammarAccess.getRelationalOperatorAccess().getNameGreaterThanSignKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelationalOperatorRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_2, null);
				}
				    |
				lv_name_0_3='<'
				{
					newLeafNode(lv_name_0_3, grammarAccess.getRelationalOperatorAccess().getNameLessThanSignKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelationalOperatorRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_3, null);
				}
				    |
				lv_name_0_4='>='
				{
					newLeafNode(lv_name_0_4, grammarAccess.getRelationalOperatorAccess().getNameGreaterThanSignEqualsSignKeyword_0_3());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelationalOperatorRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_4, null);
				}
				    |
				lv_name_0_5='<='
				{
					newLeafNode(lv_name_0_5, grammarAccess.getRelationalOperatorAccess().getNameLessThanSignEqualsSignKeyword_0_4());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelationalOperatorRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_5, null);
				}
				    |
				lv_name_0_6='<>'
				{
					newLeafNode(lv_name_0_6, grammarAccess.getRelationalOperatorAccess().getNameLessThanSignGreaterThanSignKeyword_0_5());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelationalOperatorRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_6, null);
				}
			)
		)
	)
;

// Entry rule entryRuleLogicalOperator
entryRuleLogicalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalOperatorRule()); }
	iv_ruleLogicalOperator=ruleLogicalOperator
	{ $current=$iv_ruleLogicalOperator.current; }
	EOF;

// Rule LogicalOperator
ruleLogicalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_1='and'
				{
					newLeafNode(lv_name_0_1, grammarAccess.getLogicalOperatorAccess().getNameAndKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLogicalOperatorRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_1, null);
				}
				    |
				lv_name_0_2='or'
				{
					newLeafNode(lv_name_0_2, grammarAccess.getLogicalOperatorAccess().getNameOrKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLogicalOperatorRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_2, null);
				}
				    |
				lv_name_0_3='xor'
				{
					newLeafNode(lv_name_0_3, grammarAccess.getLogicalOperatorAccess().getNameXorKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLogicalOperatorRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_3, null);
				}
				    |
				lv_name_0_4='implies'
				{
					newLeafNode(lv_name_0_4, grammarAccess.getLogicalOperatorAccess().getNameImpliesKeyword_0_3());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLogicalOperatorRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_4, null);
				}
			)
		)
	)
;

fragment RULE_LOWER : 'a'..'z';

fragment RULE_UPPER : 'A'..'Z';

fragment RULE_LETTER : (RULE_UPPER|RULE_LOWER);

fragment RULE_DIGIT : '0'..'9';

RULE_NUMBER : RULE_DIGIT+;

fragment RULE_IDCHAR : (RULE_LETTER|RULE_DIGIT|'_');

RULE_NAME_TERMINAL : RULE_LOWER RULE_IDCHAR*;

RULE_TYPENAME_TERMINAL : RULE_UPPER RULE_IDCHAR*;

RULE_DOUBLE_COLON : RULE_COLON RULE_COLON;

RULE_COLON : ':';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
