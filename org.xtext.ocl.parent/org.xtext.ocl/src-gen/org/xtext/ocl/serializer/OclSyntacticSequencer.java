/*
 * generated by Xtext 2.26.0-SNAPSHOT
 */
package org.xtext.ocl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.ocl.services.OclGrammarAccess;

@SuppressWarnings("all")
public class OclSyntacticSequencer extends AbstractSyntacticSequencer {

	protected OclGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ContextExpression_InvKeyword_2_0_or_PostKeyword_2_2_or_PreKeyword_2_1;
	protected AbstractElementAlias match_ContextExpression___ContextKeyword_0_TYPENAME_TERMINALTerminalRuleCall_1___InvKeyword_2_0_or_PostKeyword_2_2_or_PreKeyword_2_1____q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (OclGrammarAccess) access;
		match_ContextExpression_InvKeyword_2_0_or_PostKeyword_2_2_or_PreKeyword_2_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getContextExpressionAccess().getInvKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getContextExpressionAccess().getPostKeyword_2_2()), new TokenAlias(false, false, grammarAccess.getContextExpressionAccess().getPreKeyword_2_1()));
		match_ContextExpression___ContextKeyword_0_TYPENAME_TERMINALTerminalRuleCall_1___InvKeyword_2_0_or_PostKeyword_2_2_or_PreKeyword_2_1____q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getContextExpressionAccess().getContextKeyword_0()), new TokenAlias(false, false, grammarAccess.getContextExpressionAccess().getTYPENAME_TERMINALTerminalRuleCall_1()), new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getContextExpressionAccess().getInvKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getContextExpressionAccess().getPostKeyword_2_2()), new TokenAlias(false, false, grammarAccess.getContextExpressionAccess().getPreKeyword_2_1())));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getCOLONRule())
			return getCOLONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDOUBLE_COLONRule())
			return getDOUBLE_COLONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNUMBERRule())
			return getNUMBERToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSTRINGRule())
			return getSTRINGToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTYPENAME_TERMINALRule())
			return getTYPENAME_TERMINALToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal COLON: ':';
	 */
	protected String getCOLONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":";
	}
	
	/**
	 * terminal DOUBLE_COLON: COLON COLON;
	 */
	protected String getDOUBLE_COLONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":";
	}
	
	/**
	 * terminal NUMBER: (DIGIT)+;
	 */
	protected String getNUMBERToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal STRING:
	 * 			'"' ( '\\' .  | !('\\'|'"') )* '"' |
	 * 			"'" ( '\\' .  | !('\\'|"'") )* "'"
	 * 		;
	 */
	protected String getSTRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	/**
	 * terminal TYPENAME_TERMINAL: UPPER(IDCHAR)*;
	 */
	protected String getTYPENAME_TERMINALToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ContextExpression_InvKeyword_2_0_or_PostKeyword_2_2_or_PreKeyword_2_1.equals(syntax))
				emit_ContextExpression_InvKeyword_2_0_or_PostKeyword_2_2_or_PreKeyword_2_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ContextExpression___ContextKeyword_0_TYPENAME_TERMINALTerminalRuleCall_1___InvKeyword_2_0_or_PostKeyword_2_2_or_PreKeyword_2_1____q.equals(syntax))
				emit_ContextExpression___ContextKeyword_0_TYPENAME_TERMINALTerminalRuleCall_1___InvKeyword_2_0_or_PostKeyword_2_2_or_PreKeyword_2_1____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'inv:' | 'pre:' | 'post:'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'context' TYPENAME_TERMINAL (ambiguity) exp+=RelationalExpression
	 
	 * </pre>
	 */
	protected void emit_ContextExpression_InvKeyword_2_0_or_PostKeyword_2_2_or_PreKeyword_2_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('context' TYPENAME_TERMINAL ('inv:' | 'pre:' | 'post:'))?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) exp+=RelationalExpression
	 
	 * </pre>
	 */
	protected void emit_ContextExpression___ContextKeyword_0_TYPENAME_TERMINALTerminalRuleCall_1___InvKeyword_2_0_or_PostKeyword_2_2_or_PreKeyword_2_1____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
